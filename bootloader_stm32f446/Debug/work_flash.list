
work_flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e50  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004014  08004014  00014014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040a4  080040a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080040a4  080040a4  000140a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040ac  080040ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040ac  080040ac  000140ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040b0  080040b0  000140b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080040b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000000c  080040c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  080040c0  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b099  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002049  00000000  00000000  0002b0d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  0002d120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000840  00000000  00000000  0002da28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000215cd  00000000  00000000  0002e268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c287  00000000  00000000  0004f835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7e14  00000000  00000000  0005babc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001238d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002374  00000000  00000000  00123920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003ffc 	.word	0x08003ffc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003ffc 	.word	0x08003ffc

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <flash_control>:
HAL_StatusTypeDef flash_control(DataToFlash *FlashData, uint32_t size);
HAL_StatusTypeDef Flash_Program_Byte(DataToFlash *Flashdata, uint16_t *size);

static FLASH_EraseInitTypeDef EraseInitStruct;

HAL_StatusTypeDef flash_control(DataToFlash *Flashdata, uint32_t size){		// контроль правильности записанных данных
 8000518:	b480      	push	{r7}
 800051a:	b087      	sub	sp, #28
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]

	uint32_t i=0;
 8000522:	2300      	movs	r3, #0
 8000524:	617b      	str	r3, [r7, #20]
	uint32_t adr = FLASH_USER_START_ADDR;										// считываем побайтно (так как изначально, uint8_t)
 8000526:	4b26      	ldr	r3, [pc, #152]	; (80005c0 <flash_control+0xa8>)
 8000528:	613b      	str	r3, [r7, #16]
	uint8_t data = *(__IO uint8_t *)adr;
 800052a:	693b      	ldr	r3, [r7, #16]
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;

	while(i<size){
 8000530:	e03a      	b.n	80005a8 <flash_control+0x90>
		//data = *(__IO uint32_t *)FLASH_USER_START_ADDR+4;
		if(Flashdata[i].command==0)
 8000532:	697a      	ldr	r2, [r7, #20]
 8000534:	4613      	mov	r3, r2
 8000536:	00db      	lsls	r3, r3, #3
 8000538:	1a9b      	subs	r3, r3, r2
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	461a      	mov	r2, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4413      	add	r3, r2
 8000542:	7a1b      	ldrb	r3, [r3, #8]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d12c      	bne.n	80005a2 <flash_control+0x8a>
		{
			for(int j=0; j<Flashdata[i].ndata; j++)
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	e01c      	b.n	8000588 <flash_control+0x70>
			{
				if(data==Flashdata[i].data[j])
 800054e:	697a      	ldr	r2, [r7, #20]
 8000550:	4613      	mov	r3, r2
 8000552:	00db      	lsls	r3, r3, #3
 8000554:	1a9b      	subs	r3, r3, r2
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	461a      	mov	r2, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	441a      	add	r2, r3
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	4413      	add	r3, r2
 8000562:	3309      	adds	r3, #9
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	7bfa      	ldrb	r2, [r7, #15]
 8000568:	429a      	cmp	r2, r3
 800056a:	d102      	bne.n	8000572 <flash_control+0x5a>
					status=HAL_OK;
 800056c:	2300      	movs	r3, #0
 800056e:	73bb      	strb	r3, [r7, #14]
 8000570:	e001      	b.n	8000576 <flash_control+0x5e>
				else
					return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e01d      	b.n	80005b2 <flash_control+0x9a>
				adr+=1;																//	смещаем адрес на 1 байт
 8000576:	693b      	ldr	r3, [r7, #16]
 8000578:	3301      	adds	r3, #1
 800057a:	613b      	str	r3, [r7, #16]
				data = *(__IO uint8_t *)adr;
 800057c:	693b      	ldr	r3, [r7, #16]
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	73fb      	strb	r3, [r7, #15]
			for(int j=0; j<Flashdata[i].ndata; j++)
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	3301      	adds	r3, #1
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	697a      	ldr	r2, [r7, #20]
 800058a:	4613      	mov	r3, r2
 800058c:	00db      	lsls	r3, r3, #3
 800058e:	1a9b      	subs	r3, r3, r2
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	461a      	mov	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4413      	add	r3, r2
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	461a      	mov	r2, r3
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	4293      	cmp	r3, r2
 80005a0:	dbd5      	blt.n	800054e <flash_control+0x36>
			}
			/*adr+=1;																//	смещаем адрес на 1 байт
			data = *(__IO uint8_t *)adr;										//  считываем следующий байт*/
		}
		i++;
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	3301      	adds	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
	while(i<size){
 80005a8:	697a      	ldr	r2, [r7, #20]
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d3c0      	bcc.n	8000532 <flash_control+0x1a>
	}
	return status;
 80005b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	371c      	adds	r7, #28
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	08010000 	.word	0x08010000

080005c4 <Flash_Program_Byte>:

HAL_StatusTypeDef Flash_Program_Byte(DataToFlash *Flashdata, uint16_t *size)						//ф-ия для записи информации во flash-память
{
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
	uint16_t i=0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	82fb      	strh	r3, [r7, #22]
	HAL_StatusTypeDef status = HAL_OK;
 80005d2:	2300      	movs	r3, #0
 80005d4:	73fb      	strb	r3, [r7, #15]
	HAL_FLASH_Unlock();								//разблокируем память
 80005d6:	f001 f9df 	bl	8001998 <HAL_FLASH_Unlock>
	ERASE_flash();									//"освобождаем память" начиная с 2-го сектора
 80005da:	f000 f855 	bl	8000688 <ERASE_flash>

	while(i<=*size)
 80005de:	e045      	b.n	800066c <Flash_Program_Byte+0xa8>
	{
		for(int j=0; j < Flashdata[i].ndata; j++)
 80005e0:	2300      	movs	r3, #0
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	e032      	b.n	800064c <Flash_Program_Byte+0x88>
		{
			if(Flashdata[i].command==0x00)				//if command '0x00' write massive Flashdata[i].data
 80005e6:	8afa      	ldrh	r2, [r7, #22]
 80005e8:	4613      	mov	r3, r2
 80005ea:	00db      	lsls	r3, r3, #3
 80005ec:	1a9b      	subs	r3, r3, r2
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	461a      	mov	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	7a1b      	ldrb	r3, [r3, #8]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d124      	bne.n	8000646 <Flash_Program_Byte+0x82>
			{
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, (Flashdata[i].address)++,Flashdata[i].data[j] ) != HAL_OK)
 80005fc:	8afa      	ldrh	r2, [r7, #22]
 80005fe:	4613      	mov	r3, r2
 8000600:	00db      	lsls	r3, r3, #3
 8000602:	1a9b      	subs	r3, r3, r2
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	461a      	mov	r2, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4413      	add	r3, r2
 800060c:	6859      	ldr	r1, [r3, #4]
 800060e:	1c4a      	adds	r2, r1, #1
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	8afa      	ldrh	r2, [r7, #22]
 8000614:	4613      	mov	r3, r2
 8000616:	00db      	lsls	r3, r3, #3
 8000618:	1a9b      	subs	r3, r3, r2
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	461a      	mov	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	441a      	add	r2, r3
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	4413      	add	r3, r2
 8000626:	3309      	adds	r3, #9
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	b2db      	uxtb	r3, r3
 800062c:	2200      	movs	r2, #0
 800062e:	461c      	mov	r4, r3
 8000630:	4615      	mov	r5, r2
 8000632:	4622      	mov	r2, r4
 8000634:	462b      	mov	r3, r5
 8000636:	2000      	movs	r0, #0
 8000638:	f001 f95a 	bl	80018f0 <HAL_FLASH_Program>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <Flash_Program_Byte+0x82>
				{
				   /* Error occurred while writing data in Flash memory.*/
					Error_Handler();
 8000642:	f000 fdf1 	bl	8001228 <Error_Handler>
		for(int j=0; j < Flashdata[i].ndata; j++)
 8000646:	693b      	ldr	r3, [r7, #16]
 8000648:	3301      	adds	r3, #1
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	8afa      	ldrh	r2, [r7, #22]
 800064e:	4613      	mov	r3, r2
 8000650:	00db      	lsls	r3, r3, #3
 8000652:	1a9b      	subs	r3, r3, r2
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	461a      	mov	r2, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4413      	add	r3, r2
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	461a      	mov	r2, r3
 8000660:	693b      	ldr	r3, [r7, #16]
 8000662:	4293      	cmp	r3, r2
 8000664:	dbbf      	blt.n	80005e6 <Flash_Program_Byte+0x22>
				}
			}
		}
		i++;
 8000666:	8afb      	ldrh	r3, [r7, #22]
 8000668:	3301      	adds	r3, #1
 800066a:	82fb      	strh	r3, [r7, #22]
	while(i<=*size)
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	8afa      	ldrh	r2, [r7, #22]
 8000672:	429a      	cmp	r2, r3
 8000674:	d9b4      	bls.n	80005e0 <Flash_Program_Byte+0x1c>
	}
	status=HAL_FLASH_Lock();							// блокировка flash памяти
 8000676:	f001 f9b1 	bl	80019dc <HAL_FLASH_Lock>
 800067a:	4603      	mov	r3, r0
 800067c:	73fb      	strb	r3, [r7, #15]

	return status;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3718      	adds	r7, #24
 8000684:	46bd      	mov	sp, r7
 8000686:	bdb0      	pop	{r4, r5, r7, pc}

08000688 <ERASE_flash>:
static void ERASE_flash(void)															//ф-ия для удаления
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
	uint32_t FirstSector = 0, NbOfSectors = 0, SECTORError = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
	//static uint32_t GetSector(uint32_t Address);

	/* Get the 4st sector to erase */
	FirstSector = GetSector(FLASH_USER_START_ADDR);
 800069a:	4816      	ldr	r0, [pc, #88]	; (80006f4 <ERASE_flash+0x6c>)
 800069c:	f000 f832 	bl	8000704 <GetSector>
 80006a0:	60f8      	str	r0, [r7, #12]
	/* Get the number of sector to erase from 4st sector*/
	NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
 80006a2:	4815      	ldr	r0, [pc, #84]	; (80006f8 <ERASE_flash+0x70>)
 80006a4:	f000 f82e 	bl	8000704 <GetSector>
 80006a8:	4602      	mov	r2, r0
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	3301      	adds	r3, #1
 80006b0:	60bb      	str	r3, [r7, #8]
	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <ERASE_flash+0x74>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80006b8:	4b10      	ldr	r3, [pc, #64]	; (80006fc <ERASE_flash+0x74>)
 80006ba:	2202      	movs	r2, #2
 80006bc:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = FirstSector;
 80006be:	4a0f      	ldr	r2, [pc, #60]	; (80006fc <ERASE_flash+0x74>)
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors     = NbOfSectors;
 80006c4:	4a0d      	ldr	r2, [pc, #52]	; (80006fc <ERASE_flash+0x74>)
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	4619      	mov	r1, r3
 80006ce:	480b      	ldr	r0, [pc, #44]	; (80006fc <ERASE_flash+0x74>)
 80006d0:	f001 fad4 	bl	8001c7c <HAL_FLASHEx_Erase>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d005      	beq.n	80006e6 <ERASE_flash+0x5e>
	{
	    while (1)
	    {
	    	HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	2120      	movs	r1, #32
 80006de:	4808      	ldr	r0, [pc, #32]	; (8000700 <ERASE_flash+0x78>)
 80006e0:	f001 fd82 	bl	80021e8 <HAL_GPIO_WritePin>
 80006e4:	e7f9      	b.n	80006da <ERASE_flash+0x52>
	    }
	}
	HAL_Delay(100);
 80006e6:	2064      	movs	r0, #100	; 0x64
 80006e8:	f000 ff3a 	bl	8001560 <HAL_Delay>

}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	08010000 	.word	0x08010000
 80006f8:	0803ffff 	.word	0x0803ffff
 80006fc:	20000028 	.word	0x20000028
 8000700:	40020000 	.word	0x40020000

08000704 <GetSector>:
  * @brief  Gets the sector of a given address
  * @param  None
  * @retval The sector of a given address
  */
static uint32_t GetSector(uint32_t Address)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]

  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4a2a      	ldr	r2, [pc, #168]	; (80007bc <GetSector+0xb8>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d206      	bcs.n	8000726 <GetSector+0x22>
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800071e:	d302      	bcc.n	8000726 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	e043      	b.n	80007ae <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a25      	ldr	r2, [pc, #148]	; (80007c0 <GetSector+0xbc>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d206      	bcs.n	800073c <GetSector+0x38>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4a22      	ldr	r2, [pc, #136]	; (80007bc <GetSector+0xb8>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d302      	bcc.n	800073c <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8000736:	2301      	movs	r3, #1
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	e038      	b.n	80007ae <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a21      	ldr	r2, [pc, #132]	; (80007c4 <GetSector+0xc0>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d206      	bcs.n	8000752 <GetSector+0x4e>
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4a1e      	ldr	r2, [pc, #120]	; (80007c0 <GetSector+0xbc>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d302      	bcc.n	8000752 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 800074c:	2302      	movs	r3, #2
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	e02d      	b.n	80007ae <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4a1c      	ldr	r2, [pc, #112]	; (80007c8 <GetSector+0xc4>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d806      	bhi.n	8000768 <GetSector+0x64>
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4a19      	ldr	r2, [pc, #100]	; (80007c4 <GetSector+0xc0>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d302      	bcc.n	8000768 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8000762:	2303      	movs	r3, #3
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	e022      	b.n	80007ae <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a18      	ldr	r2, [pc, #96]	; (80007cc <GetSector+0xc8>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d806      	bhi.n	800077e <GetSector+0x7a>
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4a15      	ldr	r2, [pc, #84]	; (80007c8 <GetSector+0xc4>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d902      	bls.n	800077e <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8000778:	2304      	movs	r3, #4
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	e017      	b.n	80007ae <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4a13      	ldr	r2, [pc, #76]	; (80007d0 <GetSector+0xcc>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d806      	bhi.n	8000794 <GetSector+0x90>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4a10      	ldr	r2, [pc, #64]	; (80007cc <GetSector+0xc8>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d902      	bls.n	8000794 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 800078e:	2305      	movs	r3, #5
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	e00c      	b.n	80007ae <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4a0f      	ldr	r2, [pc, #60]	; (80007d4 <GetSector+0xd0>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d806      	bhi.n	80007aa <GetSector+0xa6>
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4a0c      	ldr	r2, [pc, #48]	; (80007d0 <GetSector+0xcc>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d902      	bls.n	80007aa <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 80007a4:	2306      	movs	r3, #6
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	e001      	b.n	80007ae <GetSector+0xaa>
  }
  else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_7) */
  {
    sector = FLASH_SECTOR_7;
 80007aa:	2307      	movs	r3, #7
 80007ac:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 80007ae:	68fb      	ldr	r3, [r7, #12]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	08004000 	.word	0x08004000
 80007c0:	08008000 	.word	0x08008000
 80007c4:	0800c000 	.word	0x0800c000
 80007c8:	0800ffff 	.word	0x0800ffff
 80007cc:	0801ffff 	.word	0x0801ffff
 80007d0:	0803ffff 	.word	0x0803ffff
 80007d4:	0805ffff 	.word	0x0805ffff

080007d8 <symtoDigit>:

/**	function for convert symbol massive  to two-dimensional integer massive
 *
 */
HAL_StatusTypeDef symtoDigit(uint8_t *sym_massive, uint16_t LEN, uint8_t digit_massive[MAXDIGIT], uint16_t *colum)
{
 80007d8:	b480      	push	{r7}
 80007da:	b087      	sub	sp, #28
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	607a      	str	r2, [r7, #4]
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	460b      	mov	r3, r1
 80007e6:	817b      	strh	r3, [r7, #10]
	uint16_t nsym=0, i=0, k=0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	82fb      	strh	r3, [r7, #22]
 80007ec:	2300      	movs	r3, #0
 80007ee:	82bb      	strh	r3, [r7, #20]
 80007f0:	2300      	movs	r3, #0
 80007f2:	827b      	strh	r3, [r7, #18]
	unsigned char ch;
	HAL_StatusTypeDef status=HAL_OK;
 80007f4:	2300      	movs	r3, #0
 80007f6:	747b      	strb	r3, [r7, #17]

	while(nsym<=LEN)
 80007f8:	e061      	b.n	80008be <symtoDigit+0xe6>
	{
		ch=*(sym_massive+nsym);
 80007fa:	8afb      	ldrh	r3, [r7, #22]
 80007fc:	68fa      	ldr	r2, [r7, #12]
 80007fe:	4413      	add	r3, r2
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	743b      	strb	r3, [r7, #16]
		if((ch!='\r')&& (ch!=':')&& (ch!='\n'))
 8000804:	7c3b      	ldrb	r3, [r7, #16]
 8000806:	2b0d      	cmp	r3, #13
 8000808:	d04e      	beq.n	80008a8 <symtoDigit+0xd0>
 800080a:	7c3b      	ldrb	r3, [r7, #16]
 800080c:	2b3a      	cmp	r3, #58	; 0x3a
 800080e:	d04b      	beq.n	80008a8 <symtoDigit+0xd0>
 8000810:	7c3b      	ldrb	r3, [r7, #16]
 8000812:	2b0a      	cmp	r3, #10
 8000814:	d048      	beq.n	80008a8 <symtoDigit+0xd0>
		{
			if((ch>='0')&& (ch <='9'))
 8000816:	7c3b      	ldrb	r3, [r7, #16]
 8000818:	2b2f      	cmp	r3, #47	; 0x2f
 800081a:	d90a      	bls.n	8000832 <symtoDigit+0x5a>
 800081c:	7c3b      	ldrb	r3, [r7, #16]
 800081e:	2b39      	cmp	r3, #57	; 0x39
 8000820:	d807      	bhi.n	8000832 <symtoDigit+0x5a>
				digit_massive[k]=ch-'0';
 8000822:	8a7b      	ldrh	r3, [r7, #18]
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	4413      	add	r3, r2
 8000828:	7c3a      	ldrb	r2, [r7, #16]
 800082a:	3a30      	subs	r2, #48	; 0x30
 800082c:	b2d2      	uxtb	r2, r2
 800082e:	701a      	strb	r2, [r3, #0]
 8000830:	e036      	b.n	80008a0 <symtoDigit+0xc8>
			else
			{
				switch(ch)
 8000832:	7c3b      	ldrb	r3, [r7, #16]
 8000834:	3b41      	subs	r3, #65	; 0x41
 8000836:	2b05      	cmp	r3, #5
 8000838:	d832      	bhi.n	80008a0 <symtoDigit+0xc8>
 800083a:	a201      	add	r2, pc, #4	; (adr r2, 8000840 <symtoDigit+0x68>)
 800083c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000840:	08000859 	.word	0x08000859
 8000844:	08000865 	.word	0x08000865
 8000848:	08000871 	.word	0x08000871
 800084c:	0800087d 	.word	0x0800087d
 8000850:	08000889 	.word	0x08000889
 8000854:	08000895 	.word	0x08000895
				{
					case 'A':
						digit_massive[k]=10;
 8000858:	8a7b      	ldrh	r3, [r7, #18]
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	4413      	add	r3, r2
 800085e:	220a      	movs	r2, #10
 8000860:	701a      	strb	r2, [r3, #0]
						break;
 8000862:	e01d      	b.n	80008a0 <symtoDigit+0xc8>
					case 'B':
						digit_massive[k]=11;
 8000864:	8a7b      	ldrh	r3, [r7, #18]
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	4413      	add	r3, r2
 800086a:	220b      	movs	r2, #11
 800086c:	701a      	strb	r2, [r3, #0]
						break;
 800086e:	e017      	b.n	80008a0 <symtoDigit+0xc8>
					case 'C':
						digit_massive[k]=12;
 8000870:	8a7b      	ldrh	r3, [r7, #18]
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	4413      	add	r3, r2
 8000876:	220c      	movs	r2, #12
 8000878:	701a      	strb	r2, [r3, #0]
						break;
 800087a:	e011      	b.n	80008a0 <symtoDigit+0xc8>
					case 'D':
						digit_massive[k]=13;
 800087c:	8a7b      	ldrh	r3, [r7, #18]
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	4413      	add	r3, r2
 8000882:	220d      	movs	r2, #13
 8000884:	701a      	strb	r2, [r3, #0]
						break;
 8000886:	e00b      	b.n	80008a0 <symtoDigit+0xc8>
					case 'E':
						digit_massive[k]=14;
 8000888:	8a7b      	ldrh	r3, [r7, #18]
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	220e      	movs	r2, #14
 8000890:	701a      	strb	r2, [r3, #0]
						break;
 8000892:	e005      	b.n	80008a0 <symtoDigit+0xc8>
					case 'F':
						digit_massive[k]=15;
 8000894:	8a7b      	ldrh	r3, [r7, #18]
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	220f      	movs	r2, #15
 800089c:	701a      	strb	r2, [r3, #0]
						break;
 800089e:	bf00      	nop

				}
			}
			k++;  //count digit in input masssive
 80008a0:	8a7b      	ldrh	r3, [r7, #18]
 80008a2:	3301      	adds	r3, #1
 80008a4:	827b      	strh	r3, [r7, #18]
 80008a6:	e007      	b.n	80008b8 <symtoDigit+0xe0>
		}
		else {
			if(ch =='\n')
 80008a8:	7c3b      	ldrb	r3, [r7, #16]
 80008aa:	2b0a      	cmp	r3, #10
 80008ac:	d104      	bne.n	80008b8 <symtoDigit+0xe0>
			{
				digit_massive[k]=':';
 80008ae:	8a7b      	ldrh	r3, [r7, #18]
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	4413      	add	r3, r2
 80008b4:	223a      	movs	r2, #58	; 0x3a
 80008b6:	701a      	strb	r2, [r3, #0]
			}
		}
		nsym++;  //count symbols of input massive
 80008b8:	8afb      	ldrh	r3, [r7, #22]
 80008ba:	3301      	adds	r3, #1
 80008bc:	82fb      	strh	r3, [r7, #22]
	while(nsym<=LEN)
 80008be:	8afa      	ldrh	r2, [r7, #22]
 80008c0:	897b      	ldrh	r3, [r7, #10]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d999      	bls.n	80007fa <symtoDigit+0x22>
	}

	if(nsym<1)					//if input massive not data
 80008c6:	8afb      	ldrh	r3, [r7, #22]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d103      	bne.n	80008d4 <symtoDigit+0xfc>
	{
		status=HAL_ERROR;
 80008cc:	2301      	movs	r3, #1
 80008ce:	747b      	strb	r3, [r7, #17]
		return status;
 80008d0:	7c7b      	ldrb	r3, [r7, #17]
 80008d2:	e025      	b.n	8000920 <symtoDigit+0x148>
	}
	/* Цикл для перехода от 2,0 к 0x20, так как  цифра в массиве хранятся отдельно (di[i][0]=2;dig[i][1]= 0;)
	 * надо чтобы в массиве были в 0х20= 32.
	 * Для этого просто суммируем эдемент массива со следующим. dig[i][k]=(dig[i][2*k]*16)+dig[i][2*k+1];.
	 */
	for(i=0;i<MAXDIGIT;i++)
 80008d4:	2300      	movs	r3, #0
 80008d6:	82bb      	strh	r3, [r7, #20]
 80008d8:	e01c      	b.n	8000914 <symtoDigit+0x13c>
	{
		if(digit_massive[i]==':')
 80008da:	8abb      	ldrh	r3, [r7, #20]
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	4413      	add	r3, r2
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b3a      	cmp	r3, #58	; 0x3a
 80008e4:	d01a      	beq.n	800091c <symtoDigit+0x144>
			break;
		digit_massive[i]=(digit_massive[2*i]<<4)+digit_massive[2*i+1];
 80008e6:	8abb      	ldrh	r3, [r7, #20]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	461a      	mov	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4413      	add	r3, r2
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	011b      	lsls	r3, r3, #4
 80008f4:	b2d9      	uxtb	r1, r3
 80008f6:	8abb      	ldrh	r3, [r7, #20]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	3301      	adds	r3, #1
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	4413      	add	r3, r2
 8000900:	781a      	ldrb	r2, [r3, #0]
 8000902:	8abb      	ldrh	r3, [r7, #20]
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	4403      	add	r3, r0
 8000908:	440a      	add	r2, r1
 800090a:	b2d2      	uxtb	r2, r2
 800090c:	701a      	strb	r2, [r3, #0]
	for(i=0;i<MAXDIGIT;i++)
 800090e:	8abb      	ldrh	r3, [r7, #20]
 8000910:	3301      	adds	r3, #1
 8000912:	82bb      	strh	r3, [r7, #20]
 8000914:	8abb      	ldrh	r3, [r7, #20]
 8000916:	2b63      	cmp	r3, #99	; 0x63
 8000918:	d9df      	bls.n	80008da <symtoDigit+0x102>
 800091a:	e000      	b.n	800091e <symtoDigit+0x146>
			break;
 800091c:	bf00      	nop
	}
	return status;
 800091e:	7c7b      	ldrb	r3, [r7, #17]
}
 8000920:	4618      	mov	r0, r3
 8000922:	371c      	adds	r7, #28
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <crc_cont>:


static DataStatus crc_cont(uint8_t dig[MAXDIGIT])
//static STATUS_crc crc_cont(uint8_t (*dig)[MAXDIGIT], uint16_t colum,uint8_t *ptrdata, uint16_t *ndata)     //функция проверки контрольной суммы пакета (просто суммируем всё ба).
{															//просто суммируем все байты строки и отбрасываем все страшие байты и сумма должна быть равна "00"
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	int j=0;
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
	uint8_t sum=0;
 8000938:	2300      	movs	r3, #0
 800093a:	72fb      	strb	r3, [r7, #11]


//	for(i=0;i<=*colum;i++)									// суммируем
//	{

	for(j=0;j<=(dig[0]+4);j++)
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	e009      	b.n	8000956 <crc_cont+0x2a>
		sum=sum+dig[j];
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	4413      	add	r3, r2
 8000948:	781a      	ldrb	r2, [r3, #0]
 800094a:	7afb      	ldrb	r3, [r7, #11]
 800094c:	4413      	add	r3, r2
 800094e:	72fb      	strb	r3, [r7, #11]
	for(j=0;j<=(dig[0]+4);j++)
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	3301      	adds	r3, #1
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	3304      	adds	r3, #4
 800095c:	68fa      	ldr	r2, [r7, #12]
 800095e:	429a      	cmp	r2, r3
 8000960:	ddef      	ble.n	8000942 <crc_cont+0x16>
//	}

	if(sum!=0)
 8000962:	7afb      	ldrb	r3, [r7, #11]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <crc_cont+0x40>
	{
		return error_crc;
 8000968:	2305      	movs	r3, #5
 800096a:	e000      	b.n	800096e <crc_cont+0x42>
	}
	else
		return work_ok;
 800096c:	2301      	movs	r3, #1

}
 800096e:	4618      	mov	r0, r3
 8000970:	3714      	adds	r7, #20
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
	...

0800097c <parsing_data>:
/* Parsing the data into bytes
 * Two-dimensional array ((*digit_massive)[MAXDIGIT]) data parsing of data, record type, address  (struct DataToFlash).
 */
static DataStatus parsing_data(uint8_t digit_massive[MAXDIGIT], DataToFlash *Flashdata, uint16_t *size, uint32_t *start_address)
{
 800097c:	b480      	push	{r7}
 800097e:	b089      	sub	sp, #36	; 0x24
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
 8000988:	603b      	str	r3, [r7, #0]
	uint16_t  j=0,k=0;
 800098a:	2300      	movs	r3, #0
 800098c:	83fb      	strh	r3, [r7, #30]
 800098e:	2300      	movs	r3, #0
 8000990:	83bb      	strh	r3, [r7, #28]
	uint32_t line_addr=0, offset_addr=0;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]

	DataStatus status_file=error_data;
 800099a:	2306      	movs	r3, #6
 800099c:	76fb      	strb	r3, [r7, #27]

	(Flashdata+*size)->command = *(digit_massive+3);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	461a      	mov	r2, r3
 80009a4:	4613      	mov	r3, r2
 80009a6:	00db      	lsls	r3, r3, #3
 80009a8:	1a9b      	subs	r3, r3, r2
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	461a      	mov	r2, r3
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	4413      	add	r3, r2
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	78d2      	ldrb	r2, [r2, #3]
 80009b6:	721a      	strb	r2, [r3, #8]
	(Flashdata+*size)->ndata = *digit_massive;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	881b      	ldrh	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	4613      	mov	r3, r2
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	1a9b      	subs	r3, r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	461a      	mov	r2, r3
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	4413      	add	r3, r2
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	7812      	ldrb	r2, [r2, #0]
 80009d0:	701a      	strb	r2, [r3, #0]

	switch((Flashdata+*size)->command)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	461a      	mov	r2, r3
 80009d8:	4613      	mov	r3, r2
 80009da:	00db      	lsls	r3, r3, #3
 80009dc:	1a9b      	subs	r3, r3, r2
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	461a      	mov	r2, r3
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	4413      	add	r3, r2
 80009e6:	7a1b      	ldrb	r3, [r3, #8]
 80009e8:	2b05      	cmp	r3, #5
 80009ea:	d879      	bhi.n	8000ae0 <parsing_data+0x164>
 80009ec:	a201      	add	r2, pc, #4	; (adr r2, 80009f4 <parsing_data+0x78>)
 80009ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f2:	bf00      	nop
 80009f4:	08000a31 	.word	0x08000a31
 80009f8:	08000adb 	.word	0x08000adb
 80009fc:	08000ae1 	.word	0x08000ae1
 8000a00:	08000ae1 	.word	0x08000ae1
 8000a04:	08000a0d 	.word	0x08000a0d
 8000a08:	08000ab3 	.word	0x08000ab3
	{
		case (START_CMD):
		{
			*start_address=(((*(digit_massive+4))<<8)+*(digit_massive+5))<<16;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	3304      	adds	r3, #4
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	021b      	lsls	r3, r3, #8
 8000a14:	68fa      	ldr	r2, [r7, #12]
 8000a16:	3205      	adds	r2, #5
 8000a18:	7812      	ldrb	r2, [r2, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	041b      	lsls	r3, r3, #16
 8000a1e:	461a      	mov	r2, r3
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	601a      	str	r2, [r3, #0]
			*size=0;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	801a      	strh	r2, [r3, #0]
			status_file=start_ok;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	76fb      	strb	r3, [r7, #27]
			break;
 8000a2e:	e05a      	b.n	8000ae6 <parsing_data+0x16a>
		}
		case (DATA_CMD):
		{
			for(j=0,k=0;j<(((Flashdata+*size)->ndata)+4);j++)
 8000a30:	2300      	movs	r3, #0
 8000a32:	83fb      	strh	r3, [r7, #30]
 8000a34:	2300      	movs	r3, #0
 8000a36:	83bb      	strh	r3, [r7, #28]
 8000a38:	e029      	b.n	8000a8e <parsing_data+0x112>
			{

				if((j>3)&&(j<(((Flashdata+*size)->ndata)+4)))
 8000a3a:	8bfb      	ldrh	r3, [r7, #30]
 8000a3c:	2b03      	cmp	r3, #3
 8000a3e:	d923      	bls.n	8000a88 <parsing_data+0x10c>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4613      	mov	r3, r2
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	1a9b      	subs	r3, r3, r2
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	461a      	mov	r2, r3
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	4413      	add	r3, r2
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	1cda      	adds	r2, r3, #3
 8000a58:	8bfb      	ldrh	r3, [r7, #30]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	db14      	blt.n	8000a88 <parsing_data+0x10c>
				{
					(Flashdata+*size)->data[k] =* (digit_massive+j);
 8000a5e:	8bfb      	ldrh	r3, [r7, #30]
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	18d1      	adds	r1, r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	00db      	lsls	r3, r3, #3
 8000a6e:	1a9b      	subs	r3, r3, r2
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	461a      	mov	r2, r3
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	441a      	add	r2, r3
 8000a78:	8bbb      	ldrh	r3, [r7, #28]
 8000a7a:	7809      	ldrb	r1, [r1, #0]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	460a      	mov	r2, r1
 8000a80:	725a      	strb	r2, [r3, #9]
					k++;
 8000a82:	8bbb      	ldrh	r3, [r7, #28]
 8000a84:	3301      	adds	r3, #1
 8000a86:	83bb      	strh	r3, [r7, #28]
			for(j=0,k=0;j<(((Flashdata+*size)->ndata)+4);j++)
 8000a88:	8bfb      	ldrh	r3, [r7, #30]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	83fb      	strh	r3, [r7, #30]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	461a      	mov	r2, r3
 8000a94:	4613      	mov	r3, r2
 8000a96:	00db      	lsls	r3, r3, #3
 8000a98:	1a9b      	subs	r3, r3, r2
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	1cda      	adds	r2, r3, #3
 8000aa6:	8bfb      	ldrh	r3, [r7, #30]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	dac6      	bge.n	8000a3a <parsing_data+0xbe>
				}
			}
			status_file=work_ok;
 8000aac:	2301      	movs	r3, #1
 8000aae:	76fb      	strb	r3, [r7, #27]
			break;
 8000ab0:	e019      	b.n	8000ae6 <parsing_data+0x16a>
		}
		case(LINE_ADDR):
		{
			//*size=0;
			line_addr=((((uint32_t)(*(digit_massive+4)))<<8)+*(digit_massive+5))<<12;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	021b      	lsls	r3, r3, #8
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	3205      	adds	r2, #5
 8000abe:	7812      	ldrb	r2, [r2, #0]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	031b      	lsls	r3, r3, #12
 8000ac4:	617b      	str	r3, [r7, #20]
			if(line_addr!=*start_address)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	697a      	ldr	r2, [r7, #20]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d001      	beq.n	8000ad4 <parsing_data+0x158>
				status_file=error_addr;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	76fb      	strb	r3, [r7, #27]
			status_file=line_addr_ok;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	76fb      	strb	r3, [r7, #27]
			break;
 8000ad8:	e005      	b.n	8000ae6 <parsing_data+0x16a>
		}
		case(EOF):
		{
			//*size=0;
			status_file=end_ok;
 8000ada:	2303      	movs	r3, #3
 8000adc:	76fb      	strb	r3, [r7, #27]
			break;
 8000ade:	e002      	b.n	8000ae6 <parsing_data+0x16a>
		}
		default:
		{
			status_file=error_data;
 8000ae0:	2306      	movs	r3, #6
 8000ae2:	76fb      	strb	r3, [r7, #27]
			break;
 8000ae4:	bf00      	nop
		}
	}

	if(status_file!=error_data)
 8000ae6:	7efb      	ldrb	r3, [r7, #27]
 8000ae8:	2b06      	cmp	r3, #6
 8000aea:	d019      	beq.n	8000b20 <parsing_data+0x1a4>
	{
		/*Write address in every string Flash data (Start_cmd+)*/
		offset_addr=((uint32_t)*(digit_massive+2)) + ((uint32_t)(*(digit_massive+1))<<8);
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	3302      	adds	r3, #2
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	461a      	mov	r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	3301      	adds	r3, #1
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	021b      	lsls	r3, r3, #8
 8000afc:	4413      	add	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
		(Flashdata+*size)->address = offset_addr + *start_address;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	6819      	ldr	r1, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	881b      	ldrh	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	1a9b      	subs	r3, r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	461a      	mov	r2, r3
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	4413      	add	r3, r2
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	440a      	add	r2, r1
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	e00c      	b.n	8000b3a <parsing_data+0x1be>
	}
	else
		(Flashdata+*size)->address=0xFFFF;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4613      	mov	r3, r2
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	1a9b      	subs	r3, r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	461a      	mov	r2, r3
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	4413      	add	r3, r2
 8000b34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b38:	605a      	str	r2, [r3, #4]
	*size+=1;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	881b      	ldrh	r3, [r3, #0]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	801a      	strh	r2, [r3, #0]
	return status_file;
 8000b46:	7efb      	ldrb	r3, [r7, #27]

}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3724      	adds	r7, #36	; 0x24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <DataConverter>:
DataStatus DataConverter(uint8_t *ptrSym, uint16_t symLen,  DataToFlash *Flashdata, uint16_t *size, uint32_t *start_addr)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b09e      	sub	sp, #120	; 0x78
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	460b      	mov	r3, r1
 8000b62:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef status=HAL_OK;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	uint8_t digit_massive[MAXDIGIT]={0};
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	2260      	movs	r2, #96	; 0x60
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f003 fa38 	bl	8003fec <memset>
	DataStatus status_file=error_data;
 8000b7c:	2306      	movs	r3, #6
 8000b7e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	status = symtoDigit(ptrSym, symLen, digit_massive, size);
 8000b82:	f107 0210 	add.w	r2, r7, #16
 8000b86:	8979      	ldrh	r1, [r7, #10]
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f7ff fe24 	bl	80007d8 <symtoDigit>
 8000b90:	4603      	mov	r3, r0
 8000b92:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	if(status!=HAL_OK)
 8000b96:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <DataConverter+0x4e>
		return error_data;
 8000b9e:	2306      	movs	r3, #6
 8000ba0:	e018      	b.n	8000bd4 <DataConverter+0x80>


	if(crc_cont(digit_massive)!=error_crc)
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fec0 	bl	800092c <crc_cont>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b05      	cmp	r3, #5
 8000bb0:	d00b      	beq.n	8000bca <DataConverter+0x76>
		status_file = parsing_data(digit_massive, Flashdata, size, start_addr);
 8000bb2:	f107 0010 	add.w	r0, r7, #16
 8000bb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	6879      	ldr	r1, [r7, #4]
 8000bbe:	f7ff fedd 	bl	800097c <parsing_data>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8000bc8:	e002      	b.n	8000bd0 <DataConverter+0x7c>
	else
		status_file=error_crc;
 8000bca:	2305      	movs	r3, #5
 8000bcc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


	return status_file;
 8000bd0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3778      	adds	r7, #120	; 0x78
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bdc:	b5b0      	push	{r4, r5, r7, lr}
 8000bde:	f5ad 4de5 	sub.w	sp, sp, #29312	; 0x7280
 8000be2:	b08c      	sub	sp, #48	; 0x30
 8000be4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */



	HAL_StatusTypeDef status=HAL_OK, status_flash;
 8000be6:	2300      	movs	r3, #0
 8000be8:	f507 42e5 	add.w	r2, r7, #29312	; 0x7280
 8000bec:	f102 0225 	add.w	r2, r2, #37	; 0x25
 8000bf0:	7013      	strb	r3, [r2, #0]
	DataStatus status2=start_ok;												//DataStatus- is an enumeration in the file data_convert.h
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f507 42e5 	add.w	r2, r7, #29312	; 0x7280
 8000bf8:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8000bfc:	7013      	strb	r3, [r2, #0]
	DataToFlash Flashdata[1043];												//array of structures for storing the received data
																				//DatatoFlash 	in the file data_convert.h
	//uint8_t data[1000];

	//uint8_t Data_tx[555]="default";
	uint8_t status_data[]="flash_data_correct";
 8000bfe:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8000c02:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8000c06:	4abf      	ldr	r2, [pc, #764]	; (8000f04 <main+0x328>)
 8000c08:	461c      	mov	r4, r3
 8000c0a:	4615      	mov	r5, r2
 8000c0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c10:	682b      	ldr	r3, [r5, #0]
 8000c12:	461a      	mov	r2, r3
 8000c14:	8022      	strh	r2, [r4, #0]
 8000c16:	3402      	adds	r4, #2
 8000c18:	0c1b      	lsrs	r3, r3, #16
 8000c1a:	7023      	strb	r3, [r4, #0]
	uint8_t status_flash_error[]="flash_error_of_write";
 8000c1c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8000c20:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8000c24:	4ab8      	ldr	r2, [pc, #736]	; (8000f08 <main+0x32c>)
 8000c26:	461c      	mov	r4, r3
 8000c28:	4615      	mov	r5, r2
 8000c2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c2e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c32:	6020      	str	r0, [r4, #0]
 8000c34:	3404      	adds	r4, #4
 8000c36:	7021      	strb	r1, [r4, #0]
	uint8_t status_flash_error_data[]="flash_incorrect_recorded_data_if_Flash";
 8000c38:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8000c3c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8000c40:	4ab2      	ldr	r2, [pc, #712]	; (8000f0c <main+0x330>)
 8000c42:	461c      	mov	r4, r3
 8000c44:	4615      	mov	r5, r2
 8000c46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c52:	6020      	str	r0, [r4, #0]
 8000c54:	3404      	adds	r4, #4
 8000c56:	8021      	strh	r1, [r4, #0]
 8000c58:	3402      	adds	r4, #2
 8000c5a:	0c0b      	lsrs	r3, r1, #16
 8000c5c:	7023      	strb	r3, [r4, #0]
	uint8_t status_str[]="tranfer_OK\n";
 8000c5e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8000c62:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8000c66:	4aaa      	ldr	r2, [pc, #680]	; (8000f10 <main+0x334>)
 8000c68:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t status_error_crc[]="crc_error\n";
 8000c6e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8000c72:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8000c76:	4aa7      	ldr	r2, [pc, #668]	; (8000f14 <main+0x338>)
 8000c78:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c7a:	c303      	stmia	r3!, {r0, r1}
 8000c7c:	801a      	strh	r2, [r3, #0]
 8000c7e:	3302      	adds	r3, #2
 8000c80:	0c12      	lsrs	r2, r2, #16
 8000c82:	701a      	strb	r2, [r3, #0]
	uint8_t status_error[]="timeout\n";
 8000c84:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8000c88:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8000c8c:	4aa2      	ldr	r2, [pc, #648]	; (8000f18 <main+0x33c>)
 8000c8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c90:	c303      	stmia	r3!, {r0, r1}
 8000c92:	701a      	strb	r2, [r3, #0]

	uint16_t len=0, size=0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f507 42e5 	add.w	r2, r7, #29312	; 0x7280
 8000c9a:	f102 0226 	add.w	r2, r2, #38	; 0x26
 8000c9e:	8013      	strh	r3, [r2, #0]
 8000ca0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8000ca4:	f2a3 23a2 	subw	r3, r3, #674	; 0x2a2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	801a      	strh	r2, [r3, #0]

	uint32_t Addr_data=0;
 8000cac:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8000cb0:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb8:	f000 fbac 	bl	8001414 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cbc:	f000 f968 	bl	8000f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc0:	f000 f9fe 	bl	80010c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cc4:	f000 f9d2 	bl	800106c <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 8000cc8:	4b94      	ldr	r3, [pc, #592]	; (8000f1c <main+0x340>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	68da      	ldr	r2, [r3, #12]
 8000cce:	4b93      	ldr	r3, [pc, #588]	; (8000f1c <main+0x340>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f042 0210 	orr.w	r2, r2, #16
 8000cd6:	60da      	str	r2, [r3, #12]
  HAL_UARTEx_ReceiveToIdle_IT(&huart2,Data_rx, 25);
 8000cd8:	2219      	movs	r2, #25
 8000cda:	4991      	ldr	r1, [pc, #580]	; (8000f20 <main+0x344>)
 8000cdc:	488f      	ldr	r0, [pc, #572]	; (8000f1c <main+0x340>)
 8000cde:	f002 f996 	bl	800300e <HAL_UARTEx_ReceiveToIdle_IT>

  while (1)
  {
	 if(flag)
 8000ce2:	4b90      	ldr	r3, [pc, #576]	; (8000f24 <main+0x348>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f000 80a1 	beq.w	8000e30 <main+0x254>
	 {
		 /*
		  *Write in Flash the received data. Data received checking.
		  * */
		 status = Flash_Program_Byte(Flashdata, &size);    									// write in Flash the received data
 8000cee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000cf2:	3a22      	subs	r2, #34	; 0x22
 8000cf4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000cf8:	3b28      	subs	r3, #40	; 0x28
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fc61 	bl	80005c4 <Flash_Program_Byte>
 8000d02:	4603      	mov	r3, r0
 8000d04:	f507 42e5 	add.w	r2, r7, #29312	; 0x7280
 8000d08:	f102 0225 	add.w	r2, r2, #37	; 0x25
 8000d0c:	7013      	strb	r3, [r2, #0]
		 if(status == HAL_OK)
 8000d0e:	f507 43e5 	add.w	r3, r7, #29312	; 0x7280
 8000d12:	f103 0325 	add.w	r3, r3, #37	; 0x25
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d16a      	bne.n	8000df2 <main+0x216>
		 {
			 status_flash = flash_control(Flashdata,size);											// Checking recorded data
 8000d1c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8000d20:	f2a3 23a2 	subw	r3, r3, #674	; 0x2a2
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000d2c:	3b28      	subs	r3, #40	; 0x28
 8000d2e:	4611      	mov	r1, r2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fbf1 	bl	8000518 <flash_control>
 8000d36:	4603      	mov	r3, r0
 8000d38:	f507 42e5 	add.w	r2, r7, #29312	; 0x7280
 8000d3c:	f102 0223 	add.w	r2, r2, #35	; 0x23
 8000d40:	7013      	strb	r3, [r2, #0]
			 if(status_flash == HAL_OK)
 8000d42:	f507 43e5 	add.w	r3, r7, #29312	; 0x7280
 8000d46:	f103 0323 	add.w	r3, r3, #35	; 0x23
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d140      	bne.n	8000dd2 <main+0x1f6>
			 {
				 HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000d50:	2120      	movs	r1, #32
 8000d52:	4875      	ldr	r0, [pc, #468]	; (8000f28 <main+0x34c>)
 8000d54:	f001 fa61 	bl	800221a <HAL_GPIO_TogglePin>
				 HAL_UART_Transmit(&huart2,status_data, strlen((const char *)status_data),100);				// Displaying message in UART (COM-port)
 8000d58:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000d5c:	3b3c      	subs	r3, #60	; 0x3c
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fa50 	bl	8000204 <strlen>
 8000d64:	4603      	mov	r3, r0
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8000d6c:	393c      	subs	r1, #60	; 0x3c
 8000d6e:	2364      	movs	r3, #100	; 0x64
 8000d70:	486a      	ldr	r0, [pc, #424]	; (8000f1c <main+0x340>)
 8000d72:	f002 f8ba 	bl	8002eea <HAL_UART_Transmit>
				 /*
				  * Создаём указатель на функцию (main() основной программы), который принимает адрес по которому хранится основная программа
				  * */
				 HAL_Delay(1);
 8000d76:	2001      	movs	r0, #1
 8000d78:	f000 fbf2 	bl	8001560 <HAL_Delay>
				 void (*GoToApp)(void);
				 appJumpAddress = *((volatile uint32_t*)(ADDR_FLASH_SECTOR_4+4));
 8000d7c:	4b6b      	ldr	r3, [pc, #428]	; (8000f2c <main+0x350>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f507 42e5 	add.w	r2, r7, #29312	; 0x7280
 8000d84:	f102 021c 	add.w	r2, r2, #28
 8000d88:	6013      	str	r3, [r2, #0]
				 GoToApp = (void (*)(void))appJumpAddress;
 8000d8a:	f507 43e5 	add.w	r3, r7, #29312	; 0x7280
 8000d8e:	f103 031c 	add.w	r3, r3, #28
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f507 42e5 	add.w	r2, r7, #29312	; 0x7280
 8000d98:	f102 0218 	add.w	r2, r2, #24
 8000d9c:	6013      	str	r3, [r2, #0]
				 HAL_DeInit();																		// deinitialization HAL
 8000d9e:	f000 fb5b 	bl	8001458 <HAL_DeInit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da2:	b672      	cpsid	i
}
 8000da4:	bf00      	nop
				 __disable_irq(); 																	// deinitialization of interruptions
				 __set_MSP(*((volatile uint32_t*)ADDR_FLASH_SECTOR_4 ));							// Set new address of stack
 8000da6:	4b62      	ldr	r3, [pc, #392]	; (8000f30 <main+0x354>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f507 42e5 	add.w	r2, r7, #29312	; 0x7280
 8000dae:	f102 0214 	add.w	r2, r2, #20
 8000db2:	6013      	str	r3, [r2, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000db4:	f507 43e5 	add.w	r3, r7, #29312	; 0x7280
 8000db8:	f103 0314 	add.w	r3, r3, #20
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f383 8808 	msr	MSP, r3
}
 8000dc2:	bf00      	nop
				 GoToApp();																			// give of management
 8000dc4:	f507 43e5 	add.w	r3, r7, #29312	; 0x7280
 8000dc8:	f103 0318 	add.w	r3, r3, #24
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4798      	blx	r3
 8000dd0:	e01e      	b.n	8000e10 <main+0x234>
			}
			else
			{
				HAL_UART_Transmit(&huart2,status_flash_error_data, strlen((const char *)status_flash_error_data),100); //Displaying message in UART (COM-port)
 8000dd2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000dd6:	3b7c      	subs	r3, #124	; 0x7c
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fa13 	bl	8000204 <strlen>
 8000dde:	4603      	mov	r3, r0
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8000de6:	397c      	subs	r1, #124	; 0x7c
 8000de8:	2364      	movs	r3, #100	; 0x64
 8000dea:	484c      	ldr	r0, [pc, #304]	; (8000f1c <main+0x340>)
 8000dec:	f002 f87d 	bl	8002eea <HAL_UART_Transmit>
 8000df0:	e00e      	b.n	8000e10 <main+0x234>
			}
		 }
		 else
		 {
			 HAL_UART_Transmit(&huart2,status_flash_error, strlen((const char *)status_flash_error),100);  //Displaying message in UART (COM-port)
 8000df2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000df6:	3b54      	subs	r3, #84	; 0x54
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fa03 	bl	8000204 <strlen>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8000e06:	3954      	subs	r1, #84	; 0x54
 8000e08:	2364      	movs	r3, #100	; 0x64
 8000e0a:	4844      	ldr	r0, [pc, #272]	; (8000f1c <main+0x340>)
 8000e0c:	f002 f86d 	bl	8002eea <HAL_UART_Transmit>
		 }
	 	 flag=!flag;
 8000e10:	4b44      	ldr	r3, [pc, #272]	; (8000f24 <main+0x348>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	bf14      	ite	ne
 8000e1a:	2301      	movne	r3, #1
 8000e1c:	2300      	moveq	r3, #0
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	f083 0301 	eor.w	r3, r3, #1
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	4b3d      	ldr	r3, [pc, #244]	; (8000f24 <main+0x348>)
 8000e2e:	701a      	strb	r2, [r3, #0]
	 }
	 if (flag_uart==SET)
 8000e30:	4b40      	ldr	r3, [pc, #256]	; (8000f34 <main+0x358>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f43f af53 	beq.w	8000ce2 <main+0x106>
	 {
		 while(Data_rx[len]!='\n')															// Count received string
 8000e3c:	e00a      	b.n	8000e54 <main+0x278>
		 {
			 len++;
 8000e3e:	f507 43e5 	add.w	r3, r7, #29312	; 0x7280
 8000e42:	f103 0326 	add.w	r3, r3, #38	; 0x26
 8000e46:	881b      	ldrh	r3, [r3, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	f507 42e5 	add.w	r2, r7, #29312	; 0x7280
 8000e4e:	f102 0226 	add.w	r2, r2, #38	; 0x26
 8000e52:	8013      	strh	r3, [r2, #0]
		 while(Data_rx[len]!='\n')															// Count received string
 8000e54:	f507 43e5 	add.w	r3, r7, #29312	; 0x7280
 8000e58:	f103 0326 	add.w	r3, r3, #38	; 0x26
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	4a30      	ldr	r2, [pc, #192]	; (8000f20 <main+0x344>)
 8000e60:	5cd3      	ldrb	r3, [r2, r3]
 8000e62:	2b0a      	cmp	r3, #10
 8000e64:	d1eb      	bne.n	8000e3e <main+0x262>
		 }
		 status2=DataConverter(Data_rx,len,Flashdata, &size, &Addr_data);					// parsing data
 8000e66:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000e6a:	3922      	subs	r1, #34	; 0x22
 8000e6c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000e70:	3a28      	subs	r2, #40	; 0x28
 8000e72:	f507 43e5 	add.w	r3, r7, #29312	; 0x7280
 8000e76:	f103 0326 	add.w	r3, r3, #38	; 0x26
 8000e7a:	8818      	ldrh	r0, [r3, #0]
 8000e7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e80:	3b28      	subs	r3, #40	; 0x28
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	460b      	mov	r3, r1
 8000e86:	4601      	mov	r1, r0
 8000e88:	4825      	ldr	r0, [pc, #148]	; (8000f20 <main+0x344>)
 8000e8a:	f7ff fe63 	bl	8000b54 <DataConverter>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	f507 42e5 	add.w	r2, r7, #29312	; 0x7280
 8000e94:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8000e98:	7013      	strb	r3, [r2, #0]
		 if((status2==error_addr) || (status2==error_data))
 8000e9a:	f507 43e5 	add.w	r3, r7, #29312	; 0x7280
 8000e9e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b04      	cmp	r3, #4
 8000ea6:	d006      	beq.n	8000eb6 <main+0x2da>
 8000ea8:	f507 43e5 	add.w	r3, r7, #29312	; 0x7280
 8000eac:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b06      	cmp	r3, #6
 8000eb4:	d140      	bne.n	8000f38 <main+0x35c>
		 {
			 if (status2==error_crc)
 8000eb6:	f507 43e5 	add.w	r3, r7, #29312	; 0x7280
 8000eba:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b05      	cmp	r3, #5
 8000ec2:	d10f      	bne.n	8000ee4 <main+0x308>
			 {
				 HAL_UART_Transmit(&huart2,status_error_crc, strlen((const char *)status_error_crc),100); //Displaying message in UART (COM-port)
 8000ec4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ec8:	3b14      	subs	r3, #20
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff f99a 	bl	8000204 <strlen>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000ed8:	3914      	subs	r1, #20
 8000eda:	2364      	movs	r3, #100	; 0x64
 8000edc:	480f      	ldr	r0, [pc, #60]	; (8000f1c <main+0x340>)
 8000ede:	f002 f804 	bl	8002eea <HAL_UART_Transmit>
				 break;
 8000ee2:	e049      	b.n	8000f78 <main+0x39c>
			 }
			 else
			 {
				 HAL_UART_Transmit(&huart2,status_error, strlen((const char *)status_error),100);			//Displaying message in UART (COM-port)
 8000ee4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ee8:	3b20      	subs	r3, #32
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff f98a 	bl	8000204 <strlen>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000ef8:	3920      	subs	r1, #32
 8000efa:	2364      	movs	r3, #100	; 0x64
 8000efc:	4807      	ldr	r0, [pc, #28]	; (8000f1c <main+0x340>)
 8000efe:	f001 fff4 	bl	8002eea <HAL_UART_Transmit>
			 	 break;
 8000f02:	e039      	b.n	8000f78 <main+0x39c>
 8000f04:	08004014 	.word	0x08004014
 8000f08:	08004028 	.word	0x08004028
 8000f0c:	08004040 	.word	0x08004040
 8000f10:	08004068 	.word	0x08004068
 8000f14:	08004074 	.word	0x08004074
 8000f18:	08004080 	.word	0x08004080
 8000f1c:	2000003c 	.word	0x2000003c
 8000f20:	20000080 	.word	0x20000080
 8000f24:	200000cb 	.word	0x200000cb
 8000f28:	40020000 	.word	0x40020000
 8000f2c:	08010004 	.word	0x08010004
 8000f30:	08010000 	.word	0x08010000
 8000f34:	200000cc 	.word	0x200000cc
			 }
		 }
		 else if(status2==end_ok)
 8000f38:	f507 43e5 	add.w	r3, r7, #29312	; 0x7280
 8000f3c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	d10e      	bne.n	8000f64 <main+0x388>
		 {
			 HAL_UART_Transmit(&huart2,status_str, strlen((const char *)status_str), 100);				//Displaying message in UART (COM-port)
 8000f46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f4a:	3b08      	subs	r3, #8
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff f959 	bl	8000204 <strlen>
 8000f52:	4603      	mov	r3, r0
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000f5a:	3908      	subs	r1, #8
 8000f5c:	2364      	movs	r3, #100	; 0x64
 8000f5e:	480a      	ldr	r0, [pc, #40]	; (8000f88 <main+0x3ac>)
 8000f60:	f001 ffc3 	bl	8002eea <HAL_UART_Transmit>
		 }
		 len=0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	f507 42e5 	add.w	r2, r7, #29312	; 0x7280
 8000f6a:	f102 0226 	add.w	r2, r2, #38	; 0x26
 8000f6e:	8013      	strh	r3, [r2, #0]
		 flag_uart=RESET;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <main+0x3b0>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
	 if(flag)
 8000f76:	e6b4      	b.n	8000ce2 <main+0x106>
 8000f78:	2300      	movs	r3, #0

    /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f507 47e5 	add.w	r7, r7, #29312	; 0x7280
 8000f80:	3728      	adds	r7, #40	; 0x28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bdb0      	pop	{r4, r5, r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2000003c 	.word	0x2000003c
 8000f8c:	200000cc 	.word	0x200000cc

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b094      	sub	sp, #80	; 0x50
 8000f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	2234      	movs	r2, #52	; 0x34
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f003 f824 	bl	8003fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa4:	f107 0308 	add.w	r3, r7, #8
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	4b2a      	ldr	r3, [pc, #168]	; (8001064 <SystemClock_Config+0xd4>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	4a29      	ldr	r2, [pc, #164]	; (8001064 <SystemClock_Config+0xd4>)
 8000fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc4:	4b27      	ldr	r3, [pc, #156]	; (8001064 <SystemClock_Config+0xd4>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	603b      	str	r3, [r7, #0]
 8000fd4:	4b24      	ldr	r3, [pc, #144]	; (8001068 <SystemClock_Config+0xd8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fdc:	4a22      	ldr	r2, [pc, #136]	; (8001068 <SystemClock_Config+0xd8>)
 8000fde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	4b20      	ldr	r3, [pc, #128]	; (8001068 <SystemClock_Config+0xd8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fec:	603b      	str	r3, [r7, #0]
 8000fee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff8:	2310      	movs	r3, #16
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001000:	2300      	movs	r3, #0
 8001002:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001004:	2310      	movs	r3, #16
 8001006:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001008:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800100c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800100e:	2304      	movs	r3, #4
 8001010:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001012:	2302      	movs	r3, #2
 8001014:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001016:	2302      	movs	r3, #2
 8001018:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4618      	mov	r0, r3
 8001020:	f001 fc78 	bl	8002914 <HAL_RCC_OscConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800102a:	f000 f8fd 	bl	8001228 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102e:	230f      	movs	r3, #15
 8001030:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001032:	2302      	movs	r3, #2
 8001034:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800103a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001040:	2300      	movs	r3, #0
 8001042:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001044:	f107 0308 	add.w	r3, r7, #8
 8001048:	2102      	movs	r1, #2
 800104a:	4618      	mov	r0, r3
 800104c:	f001 f918 	bl	8002280 <HAL_RCC_ClockConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001056:	f000 f8e7 	bl	8001228 <Error_Handler>
  }
}
 800105a:	bf00      	nop
 800105c:	3750      	adds	r7, #80	; 0x50
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800
 8001068:	40007000 	.word	0x40007000

0800106c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001072:	4a12      	ldr	r2, [pc, #72]	; (80010bc <MX_USART2_UART_Init+0x50>)
 8001074:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001078:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800107c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001090:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001092:	220c      	movs	r2, #12
 8001094:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 80010a4:	f001 fed4 	bl	8002e50 <HAL_UART_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ae:	f000 f8bb 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2000003c 	.word	0x2000003c
 80010bc:	40004400 	.word	0x40004400

080010c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
 80010d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <MX_GPIO_Init+0xc4>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a29      	ldr	r2, [pc, #164]	; (8001184 <MX_GPIO_Init+0xc4>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b27      	ldr	r3, [pc, #156]	; (8001184 <MX_GPIO_Init+0xc4>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4b23      	ldr	r3, [pc, #140]	; (8001184 <MX_GPIO_Init+0xc4>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a22      	ldr	r2, [pc, #136]	; (8001184 <MX_GPIO_Init+0xc4>)
 80010fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b20      	ldr	r3, [pc, #128]	; (8001184 <MX_GPIO_Init+0xc4>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <MX_GPIO_Init+0xc4>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a1b      	ldr	r2, [pc, #108]	; (8001184 <MX_GPIO_Init+0xc4>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b19      	ldr	r3, [pc, #100]	; (8001184 <MX_GPIO_Init+0xc4>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2120      	movs	r1, #32
 800112e:	4816      	ldr	r0, [pc, #88]	; (8001188 <MX_GPIO_Init+0xc8>)
 8001130:	f001 f85a 	bl	80021e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001134:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001138:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800113a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800113e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	4619      	mov	r1, r3
 800114a:	4810      	ldr	r0, [pc, #64]	; (800118c <MX_GPIO_Init+0xcc>)
 800114c:	f000 feb8 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001150:	2320      	movs	r3, #32
 8001152:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001154:	2301      	movs	r3, #1
 8001156:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	4619      	mov	r1, r3
 8001166:	4808      	ldr	r0, [pc, #32]	; (8001188 <MX_GPIO_Init+0xc8>)
 8001168:	f000 feaa 	bl	8001ec0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2100      	movs	r1, #0
 8001170:	2028      	movs	r0, #40	; 0x28
 8001172:	f000 faf4 	bl	800175e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001176:	2028      	movs	r0, #40	; 0x28
 8001178:	f000 fb0d 	bl	8001796 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800117c:	bf00      	nop
 800117e:	3720      	adds	r7, #32
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40023800 	.word	0x40023800
 8001188:	40020000 	.word	0x40020000
 800118c:	40020800 	.word	0x40020800

08001190 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)											//Callback of button
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning*/
	if(GPIO_Pin==B1_Pin)
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011a0:	d113      	bne.n	80011ca <HAL_GPIO_EXTI_Callback+0x3a>
	{
		flag=!flag;
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x44>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	bf14      	ite	ne
 80011ac:	2301      	movne	r3, #1
 80011ae:	2300      	moveq	r3, #0
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	f083 0301 	eor.w	r3, r3, #1
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x44>)
 80011c0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80011c2:	2120      	movs	r1, #32
 80011c4:	4804      	ldr	r0, [pc, #16]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x48>)
 80011c6:	f001 f828 	bl	800221a <HAL_GPIO_TogglePin>
	}
  /* NOTE: This function Should not be modified, when the callback is needed,
		   the HAL_GPIO_EXTI_Callback could be implemented in the user file*/
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200000cb 	.word	0x200000cb
 80011d8:	40020000 	.word	0x40020000

080011dc <HAL_UARTEx_RxEventCallback>:
  /* NOTE: This function should not be modified, when the callback is needed,
      the HAL_UART_RxCpltCallback could be implemented in the user file*/

//}
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)				// обработчик события приема по UART, срабатывает по IDLE и RxCplt
{																						//
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	807b      	strh	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
	if(huart == &huart2)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <HAL_UARTEx_RxEventCallback+0x3c>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d10f      	bne.n	8001210 <HAL_UARTEx_RxEventCallback+0x34>
	{
		rx_len=50-huart->RxXferCount;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <HAL_UARTEx_RxEventCallback+0x40>)
 80011fe:	801a      	strh	r2, [r3, #0]
		//__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
		HAL_UARTEx_ReceiveToIdle_IT(&huart2,Data_rx, 50);
 8001200:	2232      	movs	r2, #50	; 0x32
 8001202:	4907      	ldr	r1, [pc, #28]	; (8001220 <HAL_UARTEx_RxEventCallback+0x44>)
 8001204:	4804      	ldr	r0, [pc, #16]	; (8001218 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001206:	f001 ff02 	bl	800300e <HAL_UARTEx_ReceiveToIdle_IT>
		flag_uart=SET;
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_UARTEx_RxEventCallback+0x48>)
 800120c:	2201      	movs	r2, #1
 800120e:	701a      	strb	r2, [r3, #0]
	}

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	2000003c 	.word	0x2000003c
 800121c:	200000ce 	.word	0x200000ce
 8001220:	20000080 	.word	0x20000080
 8001224:	200000cc 	.word	0x200000cc

08001228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800122c:	b672      	cpsid	i
}
 800122e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001230:	e7fe      	b.n	8001230 <Error_Handler+0x8>
	...

08001234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <HAL_MspInit+0x4c>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	4a0f      	ldr	r2, [pc, #60]	; (8001280 <HAL_MspInit+0x4c>)
 8001244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001248:	6453      	str	r3, [r2, #68]	; 0x44
 800124a:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <HAL_MspInit+0x4c>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	603b      	str	r3, [r7, #0]
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <HAL_MspInit+0x4c>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	4a08      	ldr	r2, [pc, #32]	; (8001280 <HAL_MspInit+0x4c>)
 8001260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001264:	6413      	str	r3, [r2, #64]	; 0x40
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_MspInit+0x4c>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001272:	2007      	movs	r0, #7
 8001274:	f000 fa68 	bl	8001748 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40023800 	.word	0x40023800

08001284 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	; 0x28
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a1d      	ldr	r2, [pc, #116]	; (8001318 <HAL_UART_MspInit+0x94>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d133      	bne.n	800130e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	4b1c      	ldr	r3, [pc, #112]	; (800131c <HAL_UART_MspInit+0x98>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	4a1b      	ldr	r2, [pc, #108]	; (800131c <HAL_UART_MspInit+0x98>)
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b4:	6413      	str	r3, [r2, #64]	; 0x40
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <HAL_UART_MspInit+0x98>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <HAL_UART_MspInit+0x98>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a14      	ldr	r2, [pc, #80]	; (800131c <HAL_UART_MspInit+0x98>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_UART_MspInit+0x98>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012de:	230c      	movs	r3, #12
 80012e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012ee:	2307      	movs	r3, #7
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	4809      	ldr	r0, [pc, #36]	; (8001320 <HAL_UART_MspInit+0x9c>)
 80012fa:	f000 fde1 	bl	8001ec0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	2026      	movs	r0, #38	; 0x26
 8001304:	f000 fa2b 	bl	800175e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001308:	2026      	movs	r0, #38	; 0x26
 800130a:	f000 fa44 	bl	8001796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800130e:	bf00      	nop
 8001310:	3728      	adds	r7, #40	; 0x28
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40004400 	.word	0x40004400
 800131c:	40023800 	.word	0x40023800
 8001320:	40020000 	.word	0x40020000

08001324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <NMI_Handler+0x4>

0800132a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800132e:	e7fe      	b.n	800132e <HardFault_Handler+0x4>

08001330 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <MemManage_Handler+0x4>

08001336 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133a:	e7fe      	b.n	800133a <BusFault_Handler+0x4>

0800133c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001340:	e7fe      	b.n	8001340 <UsageFault_Handler+0x4>

08001342 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001370:	f000 f8d6 	bl	8001520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}

08001378 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <USART2_IRQHandler+0x10>)
 800137e:	f001 feab 	bl	80030d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	2000003c 	.word	0x2000003c

0800138c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001390:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001394:	f000 ff5c 	bl	8002250 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}

0800139c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <SystemInit+0x20>)
 80013a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013a6:	4a05      	ldr	r2, [pc, #20]	; (80013bc <SystemInit+0x20>)
 80013a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013c4:	480d      	ldr	r0, [pc, #52]	; (80013fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013c6:	490e      	ldr	r1, [pc, #56]	; (8001400 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013c8:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013cc:	e002      	b.n	80013d4 <LoopCopyDataInit>

080013ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d2:	3304      	adds	r3, #4

080013d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d8:	d3f9      	bcc.n	80013ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013da:	4a0b      	ldr	r2, [pc, #44]	; (8001408 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013dc:	4c0b      	ldr	r4, [pc, #44]	; (800140c <LoopFillZerobss+0x26>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e0:	e001      	b.n	80013e6 <LoopFillZerobss>

080013e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e4:	3204      	adds	r2, #4

080013e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e8:	d3fb      	bcc.n	80013e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013ea:	f7ff ffd7 	bl	800139c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ee:	f002 fdd9 	bl	8003fa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013f2:	f7ff fbf3 	bl	8000bdc <main>
  bx  lr    
 80013f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001400:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001404:	080040b4 	.word	0x080040b4
  ldr r2, =_sbss
 8001408:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800140c:	200000f4 	.word	0x200000f4

08001410 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001410:	e7fe      	b.n	8001410 <ADC_IRQHandler>
	...

08001414 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001418:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <HAL_Init+0x40>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0d      	ldr	r2, [pc, #52]	; (8001454 <HAL_Init+0x40>)
 800141e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001422:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <HAL_Init+0x40>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <HAL_Init+0x40>)
 800142a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800142e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <HAL_Init+0x40>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a07      	ldr	r2, [pc, #28]	; (8001454 <HAL_Init+0x40>)
 8001436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800143c:	2003      	movs	r0, #3
 800143e:	f000 f983 	bl	8001748 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001442:	2000      	movs	r0, #0
 8001444:	f000 f83c 	bl	80014c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001448:	f7ff fef4 	bl	8001234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40023c00 	.word	0x40023c00

08001458 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800145c:	4b13      	ldr	r3, [pc, #76]	; (80014ac <HAL_DeInit+0x54>)
 800145e:	f04f 32ff 	mov.w	r2, #4294967295
 8001462:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <HAL_DeInit+0x54>)
 8001466:	2200      	movs	r2, #0
 8001468:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <HAL_DeInit+0x54>)
 800146c:	f04f 32ff 	mov.w	r2, #4294967295
 8001470:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <HAL_DeInit+0x54>)
 8001474:	2200      	movs	r2, #0
 8001476:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <HAL_DeInit+0x54>)
 800147a:	f04f 32ff 	mov.w	r2, #4294967295
 800147e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001480:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <HAL_DeInit+0x54>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <HAL_DeInit+0x54>)
 8001488:	f04f 32ff 	mov.w	r2, #4294967295
 800148c:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800148e:	4b07      	ldr	r3, [pc, #28]	; (80014ac <HAL_DeInit+0x54>)
 8001490:	2200      	movs	r2, #0
 8001492:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <HAL_DeInit+0x54>)
 8001496:	f04f 32ff 	mov.w	r2, #4294967295
 800149a:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <HAL_DeInit+0x54>)
 800149e:	2200      	movs	r2, #0
 80014a0:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80014a2:	f000 f805 	bl	80014b0 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40023800 	.word	0x40023800

080014b0 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_InitTick+0x54>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_InitTick+0x58>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014da:	fbb2 f3f3 	udiv	r3, r2, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f967 	bl	80017b2 <HAL_SYSTICK_Config>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00e      	b.n	800150c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b0f      	cmp	r3, #15
 80014f2:	d80a      	bhi.n	800150a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f4:	2200      	movs	r2, #0
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	f000 f92f 	bl	800175e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001500:	4a06      	ldr	r2, [pc, #24]	; (800151c <HAL_InitTick+0x5c>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	e000      	b.n	800150c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000000 	.word	0x20000000
 8001518:	20000008 	.word	0x20000008
 800151c:	20000004 	.word	0x20000004

08001520 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_IncTick+0x20>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_IncTick+0x24>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4413      	add	r3, r2
 8001530:	4a04      	ldr	r2, [pc, #16]	; (8001544 <HAL_IncTick+0x24>)
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000008 	.word	0x20000008
 8001544:	200000d0 	.word	0x200000d0

08001548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return uwTick;
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <HAL_GetTick+0x14>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	200000d0 	.word	0x200000d0

08001560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001568:	f7ff ffee 	bl	8001548 <HAL_GetTick>
 800156c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001578:	d005      	beq.n	8001586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <HAL_Delay+0x44>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001586:	bf00      	nop
 8001588:	f7ff ffde 	bl	8001548 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	429a      	cmp	r2, r3
 8001596:	d8f7      	bhi.n	8001588 <HAL_Delay+0x28>
  {
  }
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000008 	.word	0x20000008

080015a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015c4:	4013      	ands	r3, r2
 80015c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015da:	4a04      	ldr	r2, [pc, #16]	; (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	60d3      	str	r3, [r2, #12]
}
 80015e0:	bf00      	nop
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <__NVIC_GetPriorityGrouping+0x18>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	f003 0307 	and.w	r3, r3, #7
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	2b00      	cmp	r3, #0
 800161c:	db0b      	blt.n	8001636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	f003 021f 	and.w	r2, r3, #31
 8001624:	4907      	ldr	r1, [pc, #28]	; (8001644 <__NVIC_EnableIRQ+0x38>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	095b      	lsrs	r3, r3, #5
 800162c:	2001      	movs	r0, #1
 800162e:	fa00 f202 	lsl.w	r2, r0, r2
 8001632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000e100 	.word	0xe000e100

08001648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	6039      	str	r1, [r7, #0]
 8001652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001658:	2b00      	cmp	r3, #0
 800165a:	db0a      	blt.n	8001672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	b2da      	uxtb	r2, r3
 8001660:	490c      	ldr	r1, [pc, #48]	; (8001694 <__NVIC_SetPriority+0x4c>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	0112      	lsls	r2, r2, #4
 8001668:	b2d2      	uxtb	r2, r2
 800166a:	440b      	add	r3, r1
 800166c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001670:	e00a      	b.n	8001688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4908      	ldr	r1, [pc, #32]	; (8001698 <__NVIC_SetPriority+0x50>)
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	3b04      	subs	r3, #4
 8001680:	0112      	lsls	r2, r2, #4
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	440b      	add	r3, r1
 8001686:	761a      	strb	r2, [r3, #24]
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000e100 	.word	0xe000e100
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169c:	b480      	push	{r7}
 800169e:	b089      	sub	sp, #36	; 0x24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f1c3 0307 	rsb	r3, r3, #7
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	bf28      	it	cs
 80016ba:	2304      	movcs	r3, #4
 80016bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3304      	adds	r3, #4
 80016c2:	2b06      	cmp	r3, #6
 80016c4:	d902      	bls.n	80016cc <NVIC_EncodePriority+0x30>
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3b03      	subs	r3, #3
 80016ca:	e000      	b.n	80016ce <NVIC_EncodePriority+0x32>
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	f04f 32ff 	mov.w	r2, #4294967295
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43da      	mvns	r2, r3
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	401a      	ands	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e4:	f04f 31ff 	mov.w	r1, #4294967295
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	fa01 f303 	lsl.w	r3, r1, r3
 80016ee:	43d9      	mvns	r1, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	4313      	orrs	r3, r2
         );
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3724      	adds	r7, #36	; 0x24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3b01      	subs	r3, #1
 8001710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001714:	d301      	bcc.n	800171a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001716:	2301      	movs	r3, #1
 8001718:	e00f      	b.n	800173a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800171a:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <SysTick_Config+0x40>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001722:	210f      	movs	r1, #15
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	f7ff ff8e 	bl	8001648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <SysTick_Config+0x40>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001732:	4b04      	ldr	r3, [pc, #16]	; (8001744 <SysTick_Config+0x40>)
 8001734:	2207      	movs	r2, #7
 8001736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	e000e010 	.word	0xe000e010

08001748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff ff29 	bl	80015a8 <__NVIC_SetPriorityGrouping>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800175e:	b580      	push	{r7, lr}
 8001760:	b086      	sub	sp, #24
 8001762:	af00      	add	r7, sp, #0
 8001764:	4603      	mov	r3, r0
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
 800176a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001770:	f7ff ff3e 	bl	80015f0 <__NVIC_GetPriorityGrouping>
 8001774:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	6978      	ldr	r0, [r7, #20]
 800177c:	f7ff ff8e 	bl	800169c <NVIC_EncodePriority>
 8001780:	4602      	mov	r2, r0
 8001782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001786:	4611      	mov	r1, r2
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff5d 	bl	8001648 <__NVIC_SetPriority>
}
 800178e:	bf00      	nop
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff31 	bl	800160c <__NVIC_EnableIRQ>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff ffa2 	bl	8001704 <SysTick_Config>
 80017c0:	4603      	mov	r3, r0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b084      	sub	sp, #16
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80017d8:	f7ff feb6 	bl	8001548 <HAL_GetTick>
 80017dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d008      	beq.n	80017fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2280      	movs	r2, #128	; 0x80
 80017ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e052      	b.n	80018a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0216 	bic.w	r2, r2, #22
 800180a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	695a      	ldr	r2, [r3, #20]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800181a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	2b00      	cmp	r3, #0
 8001822:	d103      	bne.n	800182c <HAL_DMA_Abort+0x62>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001828:	2b00      	cmp	r3, #0
 800182a:	d007      	beq.n	800183c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0208 	bic.w	r2, r2, #8
 800183a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f022 0201 	bic.w	r2, r2, #1
 800184a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800184c:	e013      	b.n	8001876 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800184e:	f7ff fe7b 	bl	8001548 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b05      	cmp	r3, #5
 800185a:	d90c      	bls.n	8001876 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2220      	movs	r2, #32
 8001860:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2203      	movs	r2, #3
 8001866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e015      	b.n	80018a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1e4      	bne.n	800184e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001888:	223f      	movs	r2, #63	; 0x3f
 800188a:	409a      	lsls	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d004      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2280      	movs	r2, #128	; 0x80
 80018c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e00c      	b.n	80018e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2205      	movs	r2, #5
 80018cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 0201 	bic.w	r2, r2, #1
 80018de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001902:	4b23      	ldr	r3, [pc, #140]	; (8001990 <HAL_FLASH_Program+0xa0>)
 8001904:	7e1b      	ldrb	r3, [r3, #24]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d101      	bne.n	800190e <HAL_FLASH_Program+0x1e>
 800190a:	2302      	movs	r3, #2
 800190c:	e03b      	b.n	8001986 <HAL_FLASH_Program+0x96>
 800190e:	4b20      	ldr	r3, [pc, #128]	; (8001990 <HAL_FLASH_Program+0xa0>)
 8001910:	2201      	movs	r2, #1
 8001912:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001914:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001918:	f000 f870 	bl	80019fc <FLASH_WaitForLastOperation>
 800191c:	4603      	mov	r3, r0
 800191e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001920:	7dfb      	ldrb	r3, [r7, #23]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d12b      	bne.n	800197e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d105      	bne.n	8001938 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800192c:	783b      	ldrb	r3, [r7, #0]
 800192e:	4619      	mov	r1, r3
 8001930:	68b8      	ldr	r0, [r7, #8]
 8001932:	f000 f91b 	bl	8001b6c <FLASH_Program_Byte>
 8001936:	e016      	b.n	8001966 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d105      	bne.n	800194a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800193e:	883b      	ldrh	r3, [r7, #0]
 8001940:	4619      	mov	r1, r3
 8001942:	68b8      	ldr	r0, [r7, #8]
 8001944:	f000 f8ee 	bl	8001b24 <FLASH_Program_HalfWord>
 8001948:	e00d      	b.n	8001966 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d105      	bne.n	800195c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	4619      	mov	r1, r3
 8001954:	68b8      	ldr	r0, [r7, #8]
 8001956:	f000 f8c3 	bl	8001ae0 <FLASH_Program_Word>
 800195a:	e004      	b.n	8001966 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800195c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001960:	68b8      	ldr	r0, [r7, #8]
 8001962:	f000 f88b 	bl	8001a7c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001966:	f24c 3050 	movw	r0, #50000	; 0xc350
 800196a:	f000 f847 	bl	80019fc <FLASH_WaitForLastOperation>
 800196e:	4603      	mov	r3, r0
 8001970:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <HAL_FLASH_Program+0xa4>)
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	4a07      	ldr	r2, [pc, #28]	; (8001994 <HAL_FLASH_Program+0xa4>)
 8001978:	f023 0301 	bic.w	r3, r3, #1
 800197c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800197e:	4b04      	ldr	r3, [pc, #16]	; (8001990 <HAL_FLASH_Program+0xa0>)
 8001980:	2200      	movs	r2, #0
 8001982:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001984:	7dfb      	ldrb	r3, [r7, #23]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200000d4 	.word	0x200000d4
 8001994:	40023c00 	.word	0x40023c00

08001998 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_FLASH_Unlock+0x38>)
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	da0b      	bge.n	80019c2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_FLASH_Unlock+0x38>)
 80019ac:	4a09      	ldr	r2, [pc, #36]	; (80019d4 <HAL_FLASH_Unlock+0x3c>)
 80019ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <HAL_FLASH_Unlock+0x38>)
 80019b2:	4a09      	ldr	r2, [pc, #36]	; (80019d8 <HAL_FLASH_Unlock+0x40>)
 80019b4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_FLASH_Unlock+0x38>)
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	da01      	bge.n	80019c2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80019c2:	79fb      	ldrb	r3, [r7, #7]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	40023c00 	.word	0x40023c00
 80019d4:	45670123 	.word	0x45670123
 80019d8:	cdef89ab 	.word	0xcdef89ab

080019dc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <HAL_FLASH_Lock+0x1c>)
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <HAL_FLASH_Lock+0x1c>)
 80019e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019ea:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	40023c00 	.word	0x40023c00

080019fc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a08:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <FLASH_WaitForLastOperation+0x78>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a0e:	f7ff fd9b 	bl	8001548 <HAL_GetTick>
 8001a12:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001a14:	e010      	b.n	8001a38 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1c:	d00c      	beq.n	8001a38 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d007      	beq.n	8001a34 <FLASH_WaitForLastOperation+0x38>
 8001a24:	f7ff fd90 	bl	8001548 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d201      	bcs.n	8001a38 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e019      	b.n	8001a6c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <FLASH_WaitForLastOperation+0x7c>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1e8      	bne.n	8001a16 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <FLASH_WaitForLastOperation+0x7c>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d002      	beq.n	8001a56 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001a50:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <FLASH_WaitForLastOperation+0x7c>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <FLASH_WaitForLastOperation+0x7c>)
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001a62:	f000 f8a5 	bl	8001bb0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
  
}  
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	200000d4 	.word	0x200000d4
 8001a78:	40023c00 	.word	0x40023c00

08001a7c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <FLASH_Program_DoubleWord+0x60>)
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	4a13      	ldr	r2, [pc, #76]	; (8001adc <FLASH_Program_DoubleWord+0x60>)
 8001a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <FLASH_Program_DoubleWord+0x60>)
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	4a10      	ldr	r2, [pc, #64]	; (8001adc <FLASH_Program_DoubleWord+0x60>)
 8001a9a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001a9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001aa0:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <FLASH_Program_DoubleWord+0x60>)
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	4a0d      	ldr	r2, [pc, #52]	; (8001adc <FLASH_Program_DoubleWord+0x60>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001ab2:	f3bf 8f6f 	isb	sy
}
 8001ab6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001ab8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	000a      	movs	r2, r1
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	68f9      	ldr	r1, [r7, #12]
 8001aca:	3104      	adds	r1, #4
 8001acc:	4613      	mov	r3, r2
 8001ace:	600b      	str	r3, [r1, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	40023c00 	.word	0x40023c00

08001ae0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001aea:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <FLASH_Program_Word+0x40>)
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	4a0c      	ldr	r2, [pc, #48]	; (8001b20 <FLASH_Program_Word+0x40>)
 8001af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001af4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <FLASH_Program_Word+0x40>)
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	4a09      	ldr	r2, [pc, #36]	; (8001b20 <FLASH_Program_Word+0x40>)
 8001afc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <FLASH_Program_Word+0x40>)
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	4a06      	ldr	r2, [pc, #24]	; (8001b20 <FLASH_Program_Word+0x40>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	601a      	str	r2, [r3, #0]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	40023c00 	.word	0x40023c00

08001b24 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b30:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <FLASH_Program_HalfWord+0x44>)
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	4a0c      	ldr	r2, [pc, #48]	; (8001b68 <FLASH_Program_HalfWord+0x44>)
 8001b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <FLASH_Program_HalfWord+0x44>)
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	4a09      	ldr	r2, [pc, #36]	; (8001b68 <FLASH_Program_HalfWord+0x44>)
 8001b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <FLASH_Program_HalfWord+0x44>)
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	4a06      	ldr	r2, [pc, #24]	; (8001b68 <FLASH_Program_HalfWord+0x44>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	887a      	ldrh	r2, [r7, #2]
 8001b58:	801a      	strh	r2, [r3, #0]
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023c00 	.word	0x40023c00

08001b6c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <FLASH_Program_Byte+0x40>)
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	4a0b      	ldr	r2, [pc, #44]	; (8001bac <FLASH_Program_Byte+0x40>)
 8001b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <FLASH_Program_Byte+0x40>)
 8001b86:	4a09      	ldr	r2, [pc, #36]	; (8001bac <FLASH_Program_Byte+0x40>)
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b8c:	4b07      	ldr	r3, [pc, #28]	; (8001bac <FLASH_Program_Byte+0x40>)
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	4a06      	ldr	r2, [pc, #24]	; (8001bac <FLASH_Program_Byte+0x40>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	78fa      	ldrb	r2, [r7, #3]
 8001b9c:	701a      	strb	r2, [r3, #0]
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	40023c00 	.word	0x40023c00

08001bb0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001bb4:	4b2f      	ldr	r3, [pc, #188]	; (8001c74 <FLASH_SetErrorCode+0xc4>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d008      	beq.n	8001bd2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001bc0:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <FLASH_SetErrorCode+0xc8>)
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	f043 0310 	orr.w	r3, r3, #16
 8001bc8:	4a2b      	ldr	r2, [pc, #172]	; (8001c78 <FLASH_SetErrorCode+0xc8>)
 8001bca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001bcc:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <FLASH_SetErrorCode+0xc4>)
 8001bce:	2210      	movs	r2, #16
 8001bd0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001bd2:	4b28      	ldr	r3, [pc, #160]	; (8001c74 <FLASH_SetErrorCode+0xc4>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f003 0320 	and.w	r3, r3, #32
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d008      	beq.n	8001bf0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001bde:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <FLASH_SetErrorCode+0xc8>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	f043 0308 	orr.w	r3, r3, #8
 8001be6:	4a24      	ldr	r2, [pc, #144]	; (8001c78 <FLASH_SetErrorCode+0xc8>)
 8001be8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001bea:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <FLASH_SetErrorCode+0xc4>)
 8001bec:	2220      	movs	r2, #32
 8001bee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001bf0:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <FLASH_SetErrorCode+0xc4>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d008      	beq.n	8001c0e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <FLASH_SetErrorCode+0xc8>)
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	4a1c      	ldr	r2, [pc, #112]	; (8001c78 <FLASH_SetErrorCode+0xc8>)
 8001c06:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001c08:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <FLASH_SetErrorCode+0xc4>)
 8001c0a:	2240      	movs	r2, #64	; 0x40
 8001c0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001c0e:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <FLASH_SetErrorCode+0xc4>)
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d008      	beq.n	8001c2c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001c1a:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <FLASH_SetErrorCode+0xc8>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	f043 0302 	orr.w	r3, r3, #2
 8001c22:	4a15      	ldr	r2, [pc, #84]	; (8001c78 <FLASH_SetErrorCode+0xc8>)
 8001c24:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001c26:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <FLASH_SetErrorCode+0xc4>)
 8001c28:	2280      	movs	r2, #128	; 0x80
 8001c2a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001c2c:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <FLASH_SetErrorCode+0xc4>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d009      	beq.n	8001c4c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <FLASH_SetErrorCode+0xc8>)
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	4a0d      	ldr	r2, [pc, #52]	; (8001c78 <FLASH_SetErrorCode+0xc8>)
 8001c42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <FLASH_SetErrorCode+0xc4>)
 8001c46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c4a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001c4c:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <FLASH_SetErrorCode+0xc4>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d008      	beq.n	8001c6a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001c58:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <FLASH_SetErrorCode+0xc8>)
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	f043 0320 	orr.w	r3, r3, #32
 8001c60:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <FLASH_SetErrorCode+0xc8>)
 8001c62:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <FLASH_SetErrorCode+0xc4>)
 8001c66:	2202      	movs	r2, #2
 8001c68:	60da      	str	r2, [r3, #12]
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	40023c00 	.word	0x40023c00
 8001c78:	200000d4 	.word	0x200000d4

08001c7c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001c8e:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <HAL_FLASHEx_Erase+0xd8>)
 8001c90:	7e1b      	ldrb	r3, [r3, #24]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d101      	bne.n	8001c9a <HAL_FLASHEx_Erase+0x1e>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e058      	b.n	8001d4c <HAL_FLASHEx_Erase+0xd0>
 8001c9a:	4b2e      	ldr	r3, [pc, #184]	; (8001d54 <HAL_FLASHEx_Erase+0xd8>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ca0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ca4:	f7ff feaa 	bl	80019fc <FLASH_WaitForLastOperation>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d148      	bne.n	8001d44 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d115      	bne.n	8001cee <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4610      	mov	r0, r2
 8001cd0:	f000 f844 	bl	8001d5c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001cd4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001cd8:	f7ff fe90 	bl	80019fc <FLASH_WaitForLastOperation>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001ce0:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <HAL_FLASHEx_Erase+0xdc>)
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <HAL_FLASHEx_Erase+0xdc>)
 8001ce6:	f023 0304 	bic.w	r3, r3, #4
 8001cea:	6113      	str	r3, [r2, #16]
 8001cec:	e028      	b.n	8001d40 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	e01c      	b.n	8001d30 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	68b8      	ldr	r0, [r7, #8]
 8001d00:	f000 f850 	bl	8001da4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d08:	f7ff fe78 	bl	80019fc <FLASH_WaitForLastOperation>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <HAL_FLASHEx_Erase+0xdc>)
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	4a10      	ldr	r2, [pc, #64]	; (8001d58 <HAL_FLASHEx_Erase+0xdc>)
 8001d16:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001d1a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	601a      	str	r2, [r3, #0]
          break;
 8001d28:	e00a      	b.n	8001d40 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	4413      	add	r3, r2
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d3da      	bcc.n	8001cf6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001d40:	f000 f878 	bl	8001e34 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <HAL_FLASHEx_Erase+0xd8>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	761a      	strb	r2, [r3, #24]

  return status;
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	200000d4 	.word	0x200000d4
 8001d58:	40023c00 	.word	0x40023c00

08001d5c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	6039      	str	r1, [r7, #0]
 8001d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d68:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <FLASH_MassErase+0x44>)
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	4a0c      	ldr	r2, [pc, #48]	; (8001da0 <FLASH_MassErase+0x44>)
 8001d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001d74:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <FLASH_MassErase+0x44>)
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	4a09      	ldr	r2, [pc, #36]	; (8001da0 <FLASH_MassErase+0x44>)
 8001d7a:	f043 0304 	orr.w	r3, r3, #4
 8001d7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001d80:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <FLASH_MassErase+0x44>)
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	4a05      	ldr	r2, [pc, #20]	; (8001da0 <FLASH_MassErase+0x44>)
 8001d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d90:	6113      	str	r3, [r2, #16]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40023c00 	.word	0x40023c00

08001da4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d102      	bne.n	8001dc0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	e010      	b.n	8001de2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d103      	bne.n	8001dce <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001dc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	e009      	b.n	8001de2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d103      	bne.n	8001ddc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001dd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	e002      	b.n	8001de2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001ddc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001de0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001de2:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <FLASH_Erase_Sector+0x8c>)
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <FLASH_Erase_Sector+0x8c>)
 8001de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <FLASH_Erase_Sector+0x8c>)
 8001df0:	691a      	ldr	r2, [r3, #16]
 8001df2:	490f      	ldr	r1, [pc, #60]	; (8001e30 <FLASH_Erase_Sector+0x8c>)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <FLASH_Erase_Sector+0x8c>)
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	4a0c      	ldr	r2, [pc, #48]	; (8001e30 <FLASH_Erase_Sector+0x8c>)
 8001e00:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001e06:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <FLASH_Erase_Sector+0x8c>)
 8001e08:	691a      	ldr	r2, [r3, #16]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	4a07      	ldr	r2, [pc, #28]	; (8001e30 <FLASH_Erase_Sector+0x8c>)
 8001e12:	f043 0302 	orr.w	r3, r3, #2
 8001e16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <FLASH_Erase_Sector+0x8c>)
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <FLASH_Erase_Sector+0x8c>)
 8001e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e22:	6113      	str	r3, [r2, #16]
}
 8001e24:	bf00      	nop
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	40023c00 	.word	0x40023c00

08001e34 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001e38:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <FLASH_FlushCaches+0x88>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d017      	beq.n	8001e74 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001e44:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <FLASH_FlushCaches+0x88>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a1c      	ldr	r2, [pc, #112]	; (8001ebc <FLASH_FlushCaches+0x88>)
 8001e4a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e4e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001e50:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <FLASH_FlushCaches+0x88>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a19      	ldr	r2, [pc, #100]	; (8001ebc <FLASH_FlushCaches+0x88>)
 8001e56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e5a:	6013      	str	r3, [r2, #0]
 8001e5c:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <FLASH_FlushCaches+0x88>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a16      	ldr	r2, [pc, #88]	; (8001ebc <FLASH_FlushCaches+0x88>)
 8001e62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e66:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e68:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <FLASH_FlushCaches+0x88>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a13      	ldr	r2, [pc, #76]	; (8001ebc <FLASH_FlushCaches+0x88>)
 8001e6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e72:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001e74:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <FLASH_FlushCaches+0x88>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d017      	beq.n	8001eb0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001e80:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <FLASH_FlushCaches+0x88>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a0d      	ldr	r2, [pc, #52]	; (8001ebc <FLASH_FlushCaches+0x88>)
 8001e86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e8a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <FLASH_FlushCaches+0x88>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <FLASH_FlushCaches+0x88>)
 8001e92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <FLASH_FlushCaches+0x88>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a07      	ldr	r2, [pc, #28]	; (8001ebc <FLASH_FlushCaches+0x88>)
 8001e9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ea2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <FLASH_FlushCaches+0x88>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <FLASH_FlushCaches+0x88>)
 8001eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eae:	6013      	str	r3, [r2, #0]
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	40023c00 	.word	0x40023c00

08001ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b089      	sub	sp, #36	; 0x24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	e165      	b.n	80021a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001edc:	2201      	movs	r2, #1
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	4013      	ands	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	f040 8154 	bne.w	80021a2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d005      	beq.n	8001f12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d130      	bne.n	8001f74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4013      	ands	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f48:	2201      	movs	r2, #1
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	f003 0201 	and.w	r2, r3, #1
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	d017      	beq.n	8001fb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d123      	bne.n	8002004 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	08da      	lsrs	r2, r3, #3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3208      	adds	r2, #8
 8001fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	220f      	movs	r2, #15
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	08da      	lsrs	r2, r3, #3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3208      	adds	r2, #8
 8001ffe:	69b9      	ldr	r1, [r7, #24]
 8002000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	2203      	movs	r2, #3
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 0203 	and.w	r2, r3, #3
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 80ae 	beq.w	80021a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	4b5d      	ldr	r3, [pc, #372]	; (80021c0 <HAL_GPIO_Init+0x300>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	4a5c      	ldr	r2, [pc, #368]	; (80021c0 <HAL_GPIO_Init+0x300>)
 8002050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002054:	6453      	str	r3, [r2, #68]	; 0x44
 8002056:	4b5a      	ldr	r3, [pc, #360]	; (80021c0 <HAL_GPIO_Init+0x300>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002062:	4a58      	ldr	r2, [pc, #352]	; (80021c4 <HAL_GPIO_Init+0x304>)
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	3302      	adds	r3, #2
 800206a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	220f      	movs	r2, #15
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a4f      	ldr	r2, [pc, #316]	; (80021c8 <HAL_GPIO_Init+0x308>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d025      	beq.n	80020da <HAL_GPIO_Init+0x21a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4e      	ldr	r2, [pc, #312]	; (80021cc <HAL_GPIO_Init+0x30c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d01f      	beq.n	80020d6 <HAL_GPIO_Init+0x216>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4d      	ldr	r2, [pc, #308]	; (80021d0 <HAL_GPIO_Init+0x310>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d019      	beq.n	80020d2 <HAL_GPIO_Init+0x212>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4c      	ldr	r2, [pc, #304]	; (80021d4 <HAL_GPIO_Init+0x314>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d013      	beq.n	80020ce <HAL_GPIO_Init+0x20e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4b      	ldr	r2, [pc, #300]	; (80021d8 <HAL_GPIO_Init+0x318>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d00d      	beq.n	80020ca <HAL_GPIO_Init+0x20a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a4a      	ldr	r2, [pc, #296]	; (80021dc <HAL_GPIO_Init+0x31c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d007      	beq.n	80020c6 <HAL_GPIO_Init+0x206>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a49      	ldr	r2, [pc, #292]	; (80021e0 <HAL_GPIO_Init+0x320>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d101      	bne.n	80020c2 <HAL_GPIO_Init+0x202>
 80020be:	2306      	movs	r3, #6
 80020c0:	e00c      	b.n	80020dc <HAL_GPIO_Init+0x21c>
 80020c2:	2307      	movs	r3, #7
 80020c4:	e00a      	b.n	80020dc <HAL_GPIO_Init+0x21c>
 80020c6:	2305      	movs	r3, #5
 80020c8:	e008      	b.n	80020dc <HAL_GPIO_Init+0x21c>
 80020ca:	2304      	movs	r3, #4
 80020cc:	e006      	b.n	80020dc <HAL_GPIO_Init+0x21c>
 80020ce:	2303      	movs	r3, #3
 80020d0:	e004      	b.n	80020dc <HAL_GPIO_Init+0x21c>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e002      	b.n	80020dc <HAL_GPIO_Init+0x21c>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_GPIO_Init+0x21c>
 80020da:	2300      	movs	r3, #0
 80020dc:	69fa      	ldr	r2, [r7, #28]
 80020de:	f002 0203 	and.w	r2, r2, #3
 80020e2:	0092      	lsls	r2, r2, #2
 80020e4:	4093      	lsls	r3, r2
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020ec:	4935      	ldr	r1, [pc, #212]	; (80021c4 <HAL_GPIO_Init+0x304>)
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	089b      	lsrs	r3, r3, #2
 80020f2:	3302      	adds	r3, #2
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020fa:	4b3a      	ldr	r3, [pc, #232]	; (80021e4 <HAL_GPIO_Init+0x324>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800211e:	4a31      	ldr	r2, [pc, #196]	; (80021e4 <HAL_GPIO_Init+0x324>)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002124:	4b2f      	ldr	r3, [pc, #188]	; (80021e4 <HAL_GPIO_Init+0x324>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002148:	4a26      	ldr	r2, [pc, #152]	; (80021e4 <HAL_GPIO_Init+0x324>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800214e:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <HAL_GPIO_Init+0x324>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002172:	4a1c      	ldr	r2, [pc, #112]	; (80021e4 <HAL_GPIO_Init+0x324>)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002178:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <HAL_GPIO_Init+0x324>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800219c:	4a11      	ldr	r2, [pc, #68]	; (80021e4 <HAL_GPIO_Init+0x324>)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3301      	adds	r3, #1
 80021a6:	61fb      	str	r3, [r7, #28]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	2b0f      	cmp	r3, #15
 80021ac:	f67f ae96 	bls.w	8001edc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021b0:	bf00      	nop
 80021b2:	bf00      	nop
 80021b4:	3724      	adds	r7, #36	; 0x24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40013800 	.word	0x40013800
 80021c8:	40020000 	.word	0x40020000
 80021cc:	40020400 	.word	0x40020400
 80021d0:	40020800 	.word	0x40020800
 80021d4:	40020c00 	.word	0x40020c00
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40021400 	.word	0x40021400
 80021e0:	40021800 	.word	0x40021800
 80021e4:	40013c00 	.word	0x40013c00

080021e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	807b      	strh	r3, [r7, #2]
 80021f4:	4613      	mov	r3, r2
 80021f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021f8:	787b      	ldrb	r3, [r7, #1]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021fe:	887a      	ldrh	r2, [r7, #2]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002204:	e003      	b.n	800220e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002206:	887b      	ldrh	r3, [r7, #2]
 8002208:	041a      	lsls	r2, r3, #16
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	619a      	str	r2, [r3, #24]
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800221a:	b480      	push	{r7}
 800221c:	b085      	sub	sp, #20
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	460b      	mov	r3, r1
 8002224:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800222c:	887a      	ldrh	r2, [r7, #2]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4013      	ands	r3, r2
 8002232:	041a      	lsls	r2, r3, #16
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	43d9      	mvns	r1, r3
 8002238:	887b      	ldrh	r3, [r7, #2]
 800223a:	400b      	ands	r3, r1
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	619a      	str	r2, [r3, #24]
}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800225a:	4b08      	ldr	r3, [pc, #32]	; (800227c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800225c:	695a      	ldr	r2, [r3, #20]
 800225e:	88fb      	ldrh	r3, [r7, #6]
 8002260:	4013      	ands	r3, r2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d006      	beq.n	8002274 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002266:	4a05      	ldr	r2, [pc, #20]	; (800227c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002268:	88fb      	ldrh	r3, [r7, #6]
 800226a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800226c:	88fb      	ldrh	r3, [r7, #6]
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe ff8e 	bl	8001190 <HAL_GPIO_EXTI_Callback>
  }
}
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40013c00 	.word	0x40013c00

08002280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0cc      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002294:	4b68      	ldr	r3, [pc, #416]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 030f 	and.w	r3, r3, #15
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d90c      	bls.n	80022bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b65      	ldr	r3, [pc, #404]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b63      	ldr	r3, [pc, #396]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0b8      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d020      	beq.n	800230a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d4:	4b59      	ldr	r3, [pc, #356]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	4a58      	ldr	r2, [pc, #352]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0308 	and.w	r3, r3, #8
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022ec:	4b53      	ldr	r3, [pc, #332]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	4a52      	ldr	r2, [pc, #328]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f8:	4b50      	ldr	r3, [pc, #320]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	494d      	ldr	r1, [pc, #308]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	4313      	orrs	r3, r2
 8002308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d044      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d107      	bne.n	800232e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231e:	4b47      	ldr	r3, [pc, #284]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d119      	bne.n	800235e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e07f      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d003      	beq.n	800233e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800233a:	2b03      	cmp	r3, #3
 800233c:	d107      	bne.n	800234e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233e:	4b3f      	ldr	r3, [pc, #252]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d109      	bne.n	800235e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e06f      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234e:	4b3b      	ldr	r3, [pc, #236]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e067      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800235e:	4b37      	ldr	r3, [pc, #220]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f023 0203 	bic.w	r2, r3, #3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	4934      	ldr	r1, [pc, #208]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	4313      	orrs	r3, r2
 800236e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002370:	f7ff f8ea 	bl	8001548 <HAL_GetTick>
 8002374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002376:	e00a      	b.n	800238e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002378:	f7ff f8e6 	bl	8001548 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	f241 3288 	movw	r2, #5000	; 0x1388
 8002386:	4293      	cmp	r3, r2
 8002388:	d901      	bls.n	800238e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e04f      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238e:	4b2b      	ldr	r3, [pc, #172]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 020c 	and.w	r2, r3, #12
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	429a      	cmp	r2, r3
 800239e:	d1eb      	bne.n	8002378 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023a0:	4b25      	ldr	r3, [pc, #148]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d20c      	bcs.n	80023c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ae:	4b22      	ldr	r3, [pc, #136]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b20      	ldr	r3, [pc, #128]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e032      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d4:	4b19      	ldr	r3, [pc, #100]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4916      	ldr	r1, [pc, #88]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d009      	beq.n	8002406 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023f2:	4b12      	ldr	r3, [pc, #72]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	490e      	ldr	r1, [pc, #56]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	4313      	orrs	r3, r2
 8002404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002406:	f000 f855 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 800240a:	4602      	mov	r2, r0
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	091b      	lsrs	r3, r3, #4
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	490a      	ldr	r1, [pc, #40]	; (8002440 <HAL_RCC_ClockConfig+0x1c0>)
 8002418:	5ccb      	ldrb	r3, [r1, r3]
 800241a:	fa22 f303 	lsr.w	r3, r2, r3
 800241e:	4a09      	ldr	r2, [pc, #36]	; (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002422:	4b09      	ldr	r3, [pc, #36]	; (8002448 <HAL_RCC_ClockConfig+0x1c8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff f84a 	bl	80014c0 <HAL_InitTick>

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40023c00 	.word	0x40023c00
 800243c:	40023800 	.word	0x40023800
 8002440:	0800408c 	.word	0x0800408c
 8002444:	20000000 	.word	0x20000000
 8002448:	20000004 	.word	0x20000004

0800244c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002450:	4b03      	ldr	r3, [pc, #12]	; (8002460 <HAL_RCC_GetHCLKFreq+0x14>)
 8002452:	681b      	ldr	r3, [r3, #0]
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000000 	.word	0x20000000

08002464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002468:	f7ff fff0 	bl	800244c <HAL_RCC_GetHCLKFreq>
 800246c:	4602      	mov	r2, r0
 800246e:	4b05      	ldr	r3, [pc, #20]	; (8002484 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	0a9b      	lsrs	r3, r3, #10
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	4903      	ldr	r1, [pc, #12]	; (8002488 <HAL_RCC_GetPCLK1Freq+0x24>)
 800247a:	5ccb      	ldrb	r3, [r1, r3]
 800247c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002480:	4618      	mov	r0, r3
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40023800 	.word	0x40023800
 8002488:	0800409c 	.word	0x0800409c

0800248c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002490:	f7ff ffdc 	bl	800244c <HAL_RCC_GetHCLKFreq>
 8002494:	4602      	mov	r2, r0
 8002496:	4b05      	ldr	r3, [pc, #20]	; (80024ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	0b5b      	lsrs	r3, r3, #13
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	4903      	ldr	r1, [pc, #12]	; (80024b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024a2:	5ccb      	ldrb	r3, [r1, r3]
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40023800 	.word	0x40023800
 80024b0:	0800409c 	.word	0x0800409c

080024b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024b8:	b0ae      	sub	sp, #184	; 0xb8
 80024ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024da:	4bcb      	ldr	r3, [pc, #812]	; (8002808 <HAL_RCC_GetSysClockFreq+0x354>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 030c 	and.w	r3, r3, #12
 80024e2:	2b0c      	cmp	r3, #12
 80024e4:	f200 8206 	bhi.w	80028f4 <HAL_RCC_GetSysClockFreq+0x440>
 80024e8:	a201      	add	r2, pc, #4	; (adr r2, 80024f0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80024ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ee:	bf00      	nop
 80024f0:	08002525 	.word	0x08002525
 80024f4:	080028f5 	.word	0x080028f5
 80024f8:	080028f5 	.word	0x080028f5
 80024fc:	080028f5 	.word	0x080028f5
 8002500:	0800252d 	.word	0x0800252d
 8002504:	080028f5 	.word	0x080028f5
 8002508:	080028f5 	.word	0x080028f5
 800250c:	080028f5 	.word	0x080028f5
 8002510:	08002535 	.word	0x08002535
 8002514:	080028f5 	.word	0x080028f5
 8002518:	080028f5 	.word	0x080028f5
 800251c:	080028f5 	.word	0x080028f5
 8002520:	08002725 	.word	0x08002725
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002524:	4bb9      	ldr	r3, [pc, #740]	; (800280c <HAL_RCC_GetSysClockFreq+0x358>)
 8002526:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800252a:	e1e7      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800252c:	4bb8      	ldr	r3, [pc, #736]	; (8002810 <HAL_RCC_GetSysClockFreq+0x35c>)
 800252e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002532:	e1e3      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002534:	4bb4      	ldr	r3, [pc, #720]	; (8002808 <HAL_RCC_GetSysClockFreq+0x354>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800253c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002540:	4bb1      	ldr	r3, [pc, #708]	; (8002808 <HAL_RCC_GetSysClockFreq+0x354>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d071      	beq.n	8002630 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800254c:	4bae      	ldr	r3, [pc, #696]	; (8002808 <HAL_RCC_GetSysClockFreq+0x354>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	099b      	lsrs	r3, r3, #6
 8002552:	2200      	movs	r2, #0
 8002554:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002558:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800255c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002564:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002568:	2300      	movs	r3, #0
 800256a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800256e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002572:	4622      	mov	r2, r4
 8002574:	462b      	mov	r3, r5
 8002576:	f04f 0000 	mov.w	r0, #0
 800257a:	f04f 0100 	mov.w	r1, #0
 800257e:	0159      	lsls	r1, r3, #5
 8002580:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002584:	0150      	lsls	r0, r2, #5
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4621      	mov	r1, r4
 800258c:	1a51      	subs	r1, r2, r1
 800258e:	6439      	str	r1, [r7, #64]	; 0x40
 8002590:	4629      	mov	r1, r5
 8002592:	eb63 0301 	sbc.w	r3, r3, r1
 8002596:	647b      	str	r3, [r7, #68]	; 0x44
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80025a4:	4649      	mov	r1, r9
 80025a6:	018b      	lsls	r3, r1, #6
 80025a8:	4641      	mov	r1, r8
 80025aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ae:	4641      	mov	r1, r8
 80025b0:	018a      	lsls	r2, r1, #6
 80025b2:	4641      	mov	r1, r8
 80025b4:	1a51      	subs	r1, r2, r1
 80025b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80025b8:	4649      	mov	r1, r9
 80025ba:	eb63 0301 	sbc.w	r3, r3, r1
 80025be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	f04f 0300 	mov.w	r3, #0
 80025c8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80025cc:	4649      	mov	r1, r9
 80025ce:	00cb      	lsls	r3, r1, #3
 80025d0:	4641      	mov	r1, r8
 80025d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025d6:	4641      	mov	r1, r8
 80025d8:	00ca      	lsls	r2, r1, #3
 80025da:	4610      	mov	r0, r2
 80025dc:	4619      	mov	r1, r3
 80025de:	4603      	mov	r3, r0
 80025e0:	4622      	mov	r2, r4
 80025e2:	189b      	adds	r3, r3, r2
 80025e4:	633b      	str	r3, [r7, #48]	; 0x30
 80025e6:	462b      	mov	r3, r5
 80025e8:	460a      	mov	r2, r1
 80025ea:	eb42 0303 	adc.w	r3, r2, r3
 80025ee:	637b      	str	r3, [r7, #52]	; 0x34
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025fc:	4629      	mov	r1, r5
 80025fe:	024b      	lsls	r3, r1, #9
 8002600:	4621      	mov	r1, r4
 8002602:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002606:	4621      	mov	r1, r4
 8002608:	024a      	lsls	r2, r1, #9
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002612:	2200      	movs	r2, #0
 8002614:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002618:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800261c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002620:	f7fd fdf8 	bl	8000214 <__aeabi_uldivmod>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4613      	mov	r3, r2
 800262a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800262e:	e067      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002630:	4b75      	ldr	r3, [pc, #468]	; (8002808 <HAL_RCC_GetSysClockFreq+0x354>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	099b      	lsrs	r3, r3, #6
 8002636:	2200      	movs	r2, #0
 8002638:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800263c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002640:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002648:	67bb      	str	r3, [r7, #120]	; 0x78
 800264a:	2300      	movs	r3, #0
 800264c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800264e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002652:	4622      	mov	r2, r4
 8002654:	462b      	mov	r3, r5
 8002656:	f04f 0000 	mov.w	r0, #0
 800265a:	f04f 0100 	mov.w	r1, #0
 800265e:	0159      	lsls	r1, r3, #5
 8002660:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002664:	0150      	lsls	r0, r2, #5
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4621      	mov	r1, r4
 800266c:	1a51      	subs	r1, r2, r1
 800266e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002670:	4629      	mov	r1, r5
 8002672:	eb63 0301 	sbc.w	r3, r3, r1
 8002676:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002684:	4649      	mov	r1, r9
 8002686:	018b      	lsls	r3, r1, #6
 8002688:	4641      	mov	r1, r8
 800268a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800268e:	4641      	mov	r1, r8
 8002690:	018a      	lsls	r2, r1, #6
 8002692:	4641      	mov	r1, r8
 8002694:	ebb2 0a01 	subs.w	sl, r2, r1
 8002698:	4649      	mov	r1, r9
 800269a:	eb63 0b01 	sbc.w	fp, r3, r1
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026aa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026b2:	4692      	mov	sl, r2
 80026b4:	469b      	mov	fp, r3
 80026b6:	4623      	mov	r3, r4
 80026b8:	eb1a 0303 	adds.w	r3, sl, r3
 80026bc:	623b      	str	r3, [r7, #32]
 80026be:	462b      	mov	r3, r5
 80026c0:	eb4b 0303 	adc.w	r3, fp, r3
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80026d2:	4629      	mov	r1, r5
 80026d4:	028b      	lsls	r3, r1, #10
 80026d6:	4621      	mov	r1, r4
 80026d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026dc:	4621      	mov	r1, r4
 80026de:	028a      	lsls	r2, r1, #10
 80026e0:	4610      	mov	r0, r2
 80026e2:	4619      	mov	r1, r3
 80026e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026e8:	2200      	movs	r2, #0
 80026ea:	673b      	str	r3, [r7, #112]	; 0x70
 80026ec:	677a      	str	r2, [r7, #116]	; 0x74
 80026ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80026f2:	f7fd fd8f 	bl	8000214 <__aeabi_uldivmod>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4613      	mov	r3, r2
 80026fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002700:	4b41      	ldr	r3, [pc, #260]	; (8002808 <HAL_RCC_GetSysClockFreq+0x354>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	0c1b      	lsrs	r3, r3, #16
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	3301      	adds	r3, #1
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002712:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002716:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800271a:	fbb2 f3f3 	udiv	r3, r2, r3
 800271e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002722:	e0eb      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002724:	4b38      	ldr	r3, [pc, #224]	; (8002808 <HAL_RCC_GetSysClockFreq+0x354>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800272c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002730:	4b35      	ldr	r3, [pc, #212]	; (8002808 <HAL_RCC_GetSysClockFreq+0x354>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d06b      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800273c:	4b32      	ldr	r3, [pc, #200]	; (8002808 <HAL_RCC_GetSysClockFreq+0x354>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	099b      	lsrs	r3, r3, #6
 8002742:	2200      	movs	r2, #0
 8002744:	66bb      	str	r3, [r7, #104]	; 0x68
 8002746:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002748:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800274a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800274e:	663b      	str	r3, [r7, #96]	; 0x60
 8002750:	2300      	movs	r3, #0
 8002752:	667b      	str	r3, [r7, #100]	; 0x64
 8002754:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002758:	4622      	mov	r2, r4
 800275a:	462b      	mov	r3, r5
 800275c:	f04f 0000 	mov.w	r0, #0
 8002760:	f04f 0100 	mov.w	r1, #0
 8002764:	0159      	lsls	r1, r3, #5
 8002766:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800276a:	0150      	lsls	r0, r2, #5
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4621      	mov	r1, r4
 8002772:	1a51      	subs	r1, r2, r1
 8002774:	61b9      	str	r1, [r7, #24]
 8002776:	4629      	mov	r1, r5
 8002778:	eb63 0301 	sbc.w	r3, r3, r1
 800277c:	61fb      	str	r3, [r7, #28]
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800278a:	4659      	mov	r1, fp
 800278c:	018b      	lsls	r3, r1, #6
 800278e:	4651      	mov	r1, sl
 8002790:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002794:	4651      	mov	r1, sl
 8002796:	018a      	lsls	r2, r1, #6
 8002798:	4651      	mov	r1, sl
 800279a:	ebb2 0801 	subs.w	r8, r2, r1
 800279e:	4659      	mov	r1, fp
 80027a0:	eb63 0901 	sbc.w	r9, r3, r1
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027b8:	4690      	mov	r8, r2
 80027ba:	4699      	mov	r9, r3
 80027bc:	4623      	mov	r3, r4
 80027be:	eb18 0303 	adds.w	r3, r8, r3
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	462b      	mov	r3, r5
 80027c6:	eb49 0303 	adc.w	r3, r9, r3
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80027d8:	4629      	mov	r1, r5
 80027da:	024b      	lsls	r3, r1, #9
 80027dc:	4621      	mov	r1, r4
 80027de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027e2:	4621      	mov	r1, r4
 80027e4:	024a      	lsls	r2, r1, #9
 80027e6:	4610      	mov	r0, r2
 80027e8:	4619      	mov	r1, r3
 80027ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027ee:	2200      	movs	r2, #0
 80027f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80027f2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80027f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80027f8:	f7fd fd0c 	bl	8000214 <__aeabi_uldivmod>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4613      	mov	r3, r2
 8002802:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002806:	e065      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x420>
 8002808:	40023800 	.word	0x40023800
 800280c:	00f42400 	.word	0x00f42400
 8002810:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002814:	4b3d      	ldr	r3, [pc, #244]	; (800290c <HAL_RCC_GetSysClockFreq+0x458>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	099b      	lsrs	r3, r3, #6
 800281a:	2200      	movs	r2, #0
 800281c:	4618      	mov	r0, r3
 800281e:	4611      	mov	r1, r2
 8002820:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002824:	653b      	str	r3, [r7, #80]	; 0x50
 8002826:	2300      	movs	r3, #0
 8002828:	657b      	str	r3, [r7, #84]	; 0x54
 800282a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800282e:	4642      	mov	r2, r8
 8002830:	464b      	mov	r3, r9
 8002832:	f04f 0000 	mov.w	r0, #0
 8002836:	f04f 0100 	mov.w	r1, #0
 800283a:	0159      	lsls	r1, r3, #5
 800283c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002840:	0150      	lsls	r0, r2, #5
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4641      	mov	r1, r8
 8002848:	1a51      	subs	r1, r2, r1
 800284a:	60b9      	str	r1, [r7, #8]
 800284c:	4649      	mov	r1, r9
 800284e:	eb63 0301 	sbc.w	r3, r3, r1
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002860:	4659      	mov	r1, fp
 8002862:	018b      	lsls	r3, r1, #6
 8002864:	4651      	mov	r1, sl
 8002866:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800286a:	4651      	mov	r1, sl
 800286c:	018a      	lsls	r2, r1, #6
 800286e:	4651      	mov	r1, sl
 8002870:	1a54      	subs	r4, r2, r1
 8002872:	4659      	mov	r1, fp
 8002874:	eb63 0501 	sbc.w	r5, r3, r1
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	00eb      	lsls	r3, r5, #3
 8002882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002886:	00e2      	lsls	r2, r4, #3
 8002888:	4614      	mov	r4, r2
 800288a:	461d      	mov	r5, r3
 800288c:	4643      	mov	r3, r8
 800288e:	18e3      	adds	r3, r4, r3
 8002890:	603b      	str	r3, [r7, #0]
 8002892:	464b      	mov	r3, r9
 8002894:	eb45 0303 	adc.w	r3, r5, r3
 8002898:	607b      	str	r3, [r7, #4]
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028a6:	4629      	mov	r1, r5
 80028a8:	028b      	lsls	r3, r1, #10
 80028aa:	4621      	mov	r1, r4
 80028ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028b0:	4621      	mov	r1, r4
 80028b2:	028a      	lsls	r2, r1, #10
 80028b4:	4610      	mov	r0, r2
 80028b6:	4619      	mov	r1, r3
 80028b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028bc:	2200      	movs	r2, #0
 80028be:	64bb      	str	r3, [r7, #72]	; 0x48
 80028c0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80028c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80028c6:	f7fd fca5 	bl	8000214 <__aeabi_uldivmod>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4613      	mov	r3, r2
 80028d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80028d4:	4b0d      	ldr	r3, [pc, #52]	; (800290c <HAL_RCC_GetSysClockFreq+0x458>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	0f1b      	lsrs	r3, r3, #28
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80028e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80028e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80028f2:	e003      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <HAL_RCC_GetSysClockFreq+0x45c>)
 80028f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80028fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002900:	4618      	mov	r0, r3
 8002902:	37b8      	adds	r7, #184	; 0xb8
 8002904:	46bd      	mov	sp, r7
 8002906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800
 8002910:	00f42400 	.word	0x00f42400

08002914 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e28d      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 8083 	beq.w	8002a3a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002934:	4b94      	ldr	r3, [pc, #592]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 030c 	and.w	r3, r3, #12
 800293c:	2b04      	cmp	r3, #4
 800293e:	d019      	beq.n	8002974 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002940:	4b91      	ldr	r3, [pc, #580]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002948:	2b08      	cmp	r3, #8
 800294a:	d106      	bne.n	800295a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800294c:	4b8e      	ldr	r3, [pc, #568]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002954:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002958:	d00c      	beq.n	8002974 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800295a:	4b8b      	ldr	r3, [pc, #556]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002962:	2b0c      	cmp	r3, #12
 8002964:	d112      	bne.n	800298c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002966:	4b88      	ldr	r3, [pc, #544]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800296e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002972:	d10b      	bne.n	800298c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002974:	4b84      	ldr	r3, [pc, #528]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d05b      	beq.n	8002a38 <HAL_RCC_OscConfig+0x124>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d157      	bne.n	8002a38 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e25a      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002994:	d106      	bne.n	80029a4 <HAL_RCC_OscConfig+0x90>
 8002996:	4b7c      	ldr	r3, [pc, #496]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a7b      	ldr	r2, [pc, #492]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 800299c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	e01d      	b.n	80029e0 <HAL_RCC_OscConfig+0xcc>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029ac:	d10c      	bne.n	80029c8 <HAL_RCC_OscConfig+0xb4>
 80029ae:	4b76      	ldr	r3, [pc, #472]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a75      	ldr	r2, [pc, #468]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 80029b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	4b73      	ldr	r3, [pc, #460]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a72      	ldr	r2, [pc, #456]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 80029c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	e00b      	b.n	80029e0 <HAL_RCC_OscConfig+0xcc>
 80029c8:	4b6f      	ldr	r3, [pc, #444]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a6e      	ldr	r2, [pc, #440]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 80029ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	4b6c      	ldr	r3, [pc, #432]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a6b      	ldr	r2, [pc, #428]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 80029da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d013      	beq.n	8002a10 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7fe fdae 	bl	8001548 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f0:	f7fe fdaa 	bl	8001548 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	; 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e21f      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a02:	4b61      	ldr	r3, [pc, #388]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0xdc>
 8002a0e:	e014      	b.n	8002a3a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a10:	f7fe fd9a 	bl	8001548 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a18:	f7fe fd96 	bl	8001548 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b64      	cmp	r3, #100	; 0x64
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e20b      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a2a:	4b57      	ldr	r3, [pc, #348]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x104>
 8002a36:	e000      	b.n	8002a3a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d06f      	beq.n	8002b26 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a46:	4b50      	ldr	r3, [pc, #320]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d017      	beq.n	8002a82 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a52:	4b4d      	ldr	r3, [pc, #308]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d105      	bne.n	8002a6a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a5e:	4b4a      	ldr	r3, [pc, #296]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00b      	beq.n	8002a82 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a6a:	4b47      	ldr	r3, [pc, #284]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a72:	2b0c      	cmp	r3, #12
 8002a74:	d11c      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a76:	4b44      	ldr	r3, [pc, #272]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d116      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a82:	4b41      	ldr	r3, [pc, #260]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <HAL_RCC_OscConfig+0x186>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d001      	beq.n	8002a9a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e1d3      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9a:	4b3b      	ldr	r3, [pc, #236]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4937      	ldr	r1, [pc, #220]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aae:	e03a      	b.n	8002b26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d020      	beq.n	8002afa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab8:	4b34      	ldr	r3, [pc, #208]	; (8002b8c <HAL_RCC_OscConfig+0x278>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abe:	f7fe fd43 	bl	8001548 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ac6:	f7fe fd3f 	bl	8001548 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e1b4      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad8:	4b2b      	ldr	r3, [pc, #172]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae4:	4b28      	ldr	r3, [pc, #160]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4925      	ldr	r1, [pc, #148]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	600b      	str	r3, [r1, #0]
 8002af8:	e015      	b.n	8002b26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002afa:	4b24      	ldr	r3, [pc, #144]	; (8002b8c <HAL_RCC_OscConfig+0x278>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b00:	f7fe fd22 	bl	8001548 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b08:	f7fe fd1e 	bl	8001548 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e193      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1a:	4b1b      	ldr	r3, [pc, #108]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f0      	bne.n	8002b08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d036      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d016      	beq.n	8002b68 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b3a:	4b15      	ldr	r3, [pc, #84]	; (8002b90 <HAL_RCC_OscConfig+0x27c>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b40:	f7fe fd02 	bl	8001548 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b48:	f7fe fcfe 	bl	8001548 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e173      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b5a:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_RCC_OscConfig+0x274>)
 8002b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0x234>
 8002b66:	e01b      	b.n	8002ba0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b68:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <HAL_RCC_OscConfig+0x27c>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6e:	f7fe fceb 	bl	8001548 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b74:	e00e      	b.n	8002b94 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b76:	f7fe fce7 	bl	8001548 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d907      	bls.n	8002b94 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e15c      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	42470000 	.word	0x42470000
 8002b90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b94:	4b8a      	ldr	r3, [pc, #552]	; (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1ea      	bne.n	8002b76 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 8097 	beq.w	8002cdc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bb2:	4b83      	ldr	r3, [pc, #524]	; (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10f      	bne.n	8002bde <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	4b7f      	ldr	r3, [pc, #508]	; (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	4a7e      	ldr	r2, [pc, #504]	; (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bce:	4b7c      	ldr	r3, [pc, #496]	; (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd6:	60bb      	str	r3, [r7, #8]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bde:	4b79      	ldr	r3, [pc, #484]	; (8002dc4 <HAL_RCC_OscConfig+0x4b0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d118      	bne.n	8002c1c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bea:	4b76      	ldr	r3, [pc, #472]	; (8002dc4 <HAL_RCC_OscConfig+0x4b0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a75      	ldr	r2, [pc, #468]	; (8002dc4 <HAL_RCC_OscConfig+0x4b0>)
 8002bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bf6:	f7fe fca7 	bl	8001548 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bfe:	f7fe fca3 	bl	8001548 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e118      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c10:	4b6c      	ldr	r3, [pc, #432]	; (8002dc4 <HAL_RCC_OscConfig+0x4b0>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0f0      	beq.n	8002bfe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d106      	bne.n	8002c32 <HAL_RCC_OscConfig+0x31e>
 8002c24:	4b66      	ldr	r3, [pc, #408]	; (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c28:	4a65      	ldr	r2, [pc, #404]	; (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c30:	e01c      	b.n	8002c6c <HAL_RCC_OscConfig+0x358>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2b05      	cmp	r3, #5
 8002c38:	d10c      	bne.n	8002c54 <HAL_RCC_OscConfig+0x340>
 8002c3a:	4b61      	ldr	r3, [pc, #388]	; (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3e:	4a60      	ldr	r2, [pc, #384]	; (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002c40:	f043 0304 	orr.w	r3, r3, #4
 8002c44:	6713      	str	r3, [r2, #112]	; 0x70
 8002c46:	4b5e      	ldr	r3, [pc, #376]	; (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4a:	4a5d      	ldr	r2, [pc, #372]	; (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	6713      	str	r3, [r2, #112]	; 0x70
 8002c52:	e00b      	b.n	8002c6c <HAL_RCC_OscConfig+0x358>
 8002c54:	4b5a      	ldr	r3, [pc, #360]	; (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c58:	4a59      	ldr	r2, [pc, #356]	; (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c60:	4b57      	ldr	r3, [pc, #348]	; (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c64:	4a56      	ldr	r2, [pc, #344]	; (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002c66:	f023 0304 	bic.w	r3, r3, #4
 8002c6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d015      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c74:	f7fe fc68 	bl	8001548 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7a:	e00a      	b.n	8002c92 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c7c:	f7fe fc64 	bl	8001548 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e0d7      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c92:	4b4b      	ldr	r3, [pc, #300]	; (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0ee      	beq.n	8002c7c <HAL_RCC_OscConfig+0x368>
 8002c9e:	e014      	b.n	8002cca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca0:	f7fe fc52 	bl	8001548 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca6:	e00a      	b.n	8002cbe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca8:	f7fe fc4e 	bl	8001548 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e0c1      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cbe:	4b40      	ldr	r3, [pc, #256]	; (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1ee      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cca:	7dfb      	ldrb	r3, [r7, #23]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d105      	bne.n	8002cdc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cd0:	4b3b      	ldr	r3, [pc, #236]	; (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	4a3a      	ldr	r2, [pc, #232]	; (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002cd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 80ad 	beq.w	8002e40 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ce6:	4b36      	ldr	r3, [pc, #216]	; (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d060      	beq.n	8002db4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d145      	bne.n	8002d86 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfa:	4b33      	ldr	r3, [pc, #204]	; (8002dc8 <HAL_RCC_OscConfig+0x4b4>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe fc22 	bl	8001548 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d08:	f7fe fc1e 	bl	8001548 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e093      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1a:	4b29      	ldr	r3, [pc, #164]	; (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69da      	ldr	r2, [r3, #28]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	019b      	lsls	r3, r3, #6
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	085b      	lsrs	r3, r3, #1
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	041b      	lsls	r3, r3, #16
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d48:	061b      	lsls	r3, r3, #24
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d50:	071b      	lsls	r3, r3, #28
 8002d52:	491b      	ldr	r1, [pc, #108]	; (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d58:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <HAL_RCC_OscConfig+0x4b4>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5e:	f7fe fbf3 	bl	8001548 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d66:	f7fe fbef 	bl	8001548 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e064      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d78:	4b11      	ldr	r3, [pc, #68]	; (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0f0      	beq.n	8002d66 <HAL_RCC_OscConfig+0x452>
 8002d84:	e05c      	b.n	8002e40 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d86:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <HAL_RCC_OscConfig+0x4b4>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8c:	f7fe fbdc 	bl	8001548 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d94:	f7fe fbd8 	bl	8001548 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e04d      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da6:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_RCC_OscConfig+0x4ac>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f0      	bne.n	8002d94 <HAL_RCC_OscConfig+0x480>
 8002db2:	e045      	b.n	8002e40 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d107      	bne.n	8002dcc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e040      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	40007000 	.word	0x40007000
 8002dc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dcc:	4b1f      	ldr	r3, [pc, #124]	; (8002e4c <HAL_RCC_OscConfig+0x538>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d030      	beq.n	8002e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d129      	bne.n	8002e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d122      	bne.n	8002e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d119      	bne.n	8002e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e12:	085b      	lsrs	r3, r3, #1
 8002e14:	3b01      	subs	r3, #1
 8002e16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d10f      	bne.n	8002e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d107      	bne.n	8002e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40023800 	.word	0x40023800

08002e50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e03f      	b.n	8002ee2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d106      	bne.n	8002e7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7fe fa04 	bl	8001284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2224      	movs	r2, #36	; 0x24
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 fe11 	bl	8003abc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	691a      	ldr	r2, [r3, #16]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ea8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695a      	ldr	r2, [r3, #20]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002eb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ec8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b08a      	sub	sp, #40	; 0x28
 8002eee:	af02      	add	r7, sp, #8
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	603b      	str	r3, [r7, #0]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d17c      	bne.n	8003004 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <HAL_UART_Transmit+0x2c>
 8002f10:	88fb      	ldrh	r3, [r7, #6]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e075      	b.n	8003006 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_UART_Transmit+0x3e>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e06e      	b.n	8003006 <HAL_UART_Transmit+0x11c>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2221      	movs	r2, #33	; 0x21
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f3e:	f7fe fb03 	bl	8001548 <HAL_GetTick>
 8002f42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	88fa      	ldrh	r2, [r7, #6]
 8002f48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	88fa      	ldrh	r2, [r7, #6]
 8002f4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f58:	d108      	bne.n	8002f6c <HAL_UART_Transmit+0x82>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d104      	bne.n	8002f6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	61bb      	str	r3, [r7, #24]
 8002f6a:	e003      	b.n	8002f74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f7c:	e02a      	b.n	8002fd4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2200      	movs	r2, #0
 8002f86:	2180      	movs	r1, #128	; 0x80
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 fb51 	bl	8003630 <UART_WaitOnFlagUntilTimeout>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e036      	b.n	8003006 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10b      	bne.n	8002fb6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	3302      	adds	r3, #2
 8002fb2:	61bb      	str	r3, [r7, #24]
 8002fb4:	e007      	b.n	8002fc6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	781a      	ldrb	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1cf      	bne.n	8002f7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	2140      	movs	r1, #64	; 0x40
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 fb21 	bl	8003630 <UART_WaitOnFlagUntilTimeout>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e006      	b.n	8003006 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003000:	2300      	movs	r3, #0
 8003002:	e000      	b.n	8003006 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003004:	2302      	movs	r3, #2
  }
}
 8003006:	4618      	mov	r0, r3
 8003008:	3720      	adds	r7, #32
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b08c      	sub	sp, #48	; 0x30
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	4613      	mov	r3, r2
 800301a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b20      	cmp	r3, #32
 8003026:	d152      	bne.n	80030ce <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800302e:	88fb      	ldrh	r3, [r7, #6]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e04b      	b.n	80030d0 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 8003042:	2302      	movs	r3, #2
 8003044:	e044      	b.n	80030d0 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8003054:	88fb      	ldrh	r3, [r7, #6]
 8003056:	461a      	mov	r2, r3
 8003058:	68b9      	ldr	r1, [r7, #8]
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 fb56 	bl	800370c <UART_Start_Receive_IT>
 8003060:	4603      	mov	r3, r0
 8003062:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003066:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800306a:	2b00      	cmp	r3, #0
 800306c:	d12c      	bne.n	80030c8 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003072:	2b01      	cmp	r3, #1
 8003074:	d125      	bne.n	80030c2 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003076:	2300      	movs	r3, #0
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	330c      	adds	r3, #12
 8003092:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	e853 3f00 	ldrex	r3, [r3]
 800309a:	617b      	str	r3, [r7, #20]
   return(result);
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f043 0310 	orr.w	r3, r3, #16
 80030a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	330c      	adds	r3, #12
 80030aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030ac:	627a      	str	r2, [r7, #36]	; 0x24
 80030ae:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b0:	6a39      	ldr	r1, [r7, #32]
 80030b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b4:	e841 2300 	strex	r3, r2, [r1]
 80030b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1e5      	bne.n	800308c <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 80030c0:	e002      	b.n	80030c8 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80030c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80030cc:	e000      	b.n	80030d0 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80030ce:	2302      	movs	r3, #2
  }
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3730      	adds	r7, #48	; 0x30
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b0ba      	sub	sp, #232	; 0xe8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80030fe:	2300      	movs	r3, #0
 8003100:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003104:	2300      	movs	r3, #0
 8003106:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800310a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003116:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10f      	bne.n	800313e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800311e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b00      	cmp	r3, #0
 8003128:	d009      	beq.n	800313e <HAL_UART_IRQHandler+0x66>
 800312a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fc05 	bl	8003946 <UART_Receive_IT>
      return;
 800313c:	e256      	b.n	80035ec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800313e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 80de 	beq.w	8003304 <HAL_UART_IRQHandler+0x22c>
 8003148:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d106      	bne.n	8003162 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003158:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 80d1 	beq.w	8003304 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00b      	beq.n	8003186 <HAL_UART_IRQHandler+0xae>
 800316e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003176:	2b00      	cmp	r3, #0
 8003178:	d005      	beq.n	8003186 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f043 0201 	orr.w	r2, r3, #1
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00b      	beq.n	80031aa <HAL_UART_IRQHandler+0xd2>
 8003192:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d005      	beq.n	80031aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f043 0202 	orr.w	r2, r3, #2
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00b      	beq.n	80031ce <HAL_UART_IRQHandler+0xf6>
 80031b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d005      	beq.n	80031ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	f043 0204 	orr.w	r2, r3, #4
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d011      	beq.n	80031fe <HAL_UART_IRQHandler+0x126>
 80031da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d105      	bne.n	80031f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d005      	beq.n	80031fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f043 0208 	orr.w	r2, r3, #8
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 81ed 	beq.w	80035e2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800320c:	f003 0320 	and.w	r3, r3, #32
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <HAL_UART_IRQHandler+0x14e>
 8003214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b00      	cmp	r3, #0
 800321e:	d002      	beq.n	8003226 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 fb90 	bl	8003946 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003230:	2b40      	cmp	r3, #64	; 0x40
 8003232:	bf0c      	ite	eq
 8003234:	2301      	moveq	r3, #1
 8003236:	2300      	movne	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d103      	bne.n	8003252 <HAL_UART_IRQHandler+0x17a>
 800324a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800324e:	2b00      	cmp	r3, #0
 8003250:	d04f      	beq.n	80032f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fa98 	bl	8003788 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003262:	2b40      	cmp	r3, #64	; 0x40
 8003264:	d141      	bne.n	80032ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	3314      	adds	r3, #20
 800326c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003270:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003274:	e853 3f00 	ldrex	r3, [r3]
 8003278:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800327c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003280:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003284:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	3314      	adds	r3, #20
 800328e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003292:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003296:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800329e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80032a2:	e841 2300 	strex	r3, r2, [r1]
 80032a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80032aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1d9      	bne.n	8003266 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d013      	beq.n	80032e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032be:	4a7d      	ldr	r2, [pc, #500]	; (80034b4 <HAL_UART_IRQHandler+0x3dc>)
 80032c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fe faef 	bl	80018aa <HAL_DMA_Abort_IT>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d016      	beq.n	8003300 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032dc:	4610      	mov	r0, r2
 80032de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e0:	e00e      	b.n	8003300 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f99a 	bl	800361c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e8:	e00a      	b.n	8003300 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f996 	bl	800361c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f0:	e006      	b.n	8003300 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f992 	bl	800361c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80032fe:	e170      	b.n	80035e2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003300:	bf00      	nop
    return;
 8003302:	e16e      	b.n	80035e2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	2b01      	cmp	r3, #1
 800330a:	f040 814a 	bne.w	80035a2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800330e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003312:	f003 0310 	and.w	r3, r3, #16
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 8143 	beq.w	80035a2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800331c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003320:	f003 0310 	and.w	r3, r3, #16
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 813c 	beq.w	80035a2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800332a:	2300      	movs	r3, #0
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	60bb      	str	r3, [r7, #8]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334a:	2b40      	cmp	r3, #64	; 0x40
 800334c:	f040 80b4 	bne.w	80034b8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800335c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 8140 	beq.w	80035e6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800336a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800336e:	429a      	cmp	r2, r3
 8003370:	f080 8139 	bcs.w	80035e6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800337a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003386:	f000 8088 	beq.w	800349a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	330c      	adds	r3, #12
 8003390:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003394:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003398:	e853 3f00 	ldrex	r3, [r3]
 800339c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80033a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	330c      	adds	r3, #12
 80033b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80033b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80033c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033c6:	e841 2300 	strex	r3, r2, [r1]
 80033ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80033ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1d9      	bne.n	800338a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	3314      	adds	r3, #20
 80033dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033e0:	e853 3f00 	ldrex	r3, [r3]
 80033e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033e8:	f023 0301 	bic.w	r3, r3, #1
 80033ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	3314      	adds	r3, #20
 80033f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003400:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003402:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003406:	e841 2300 	strex	r3, r2, [r1]
 800340a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800340c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1e1      	bne.n	80033d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	3314      	adds	r3, #20
 8003418:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800341c:	e853 3f00 	ldrex	r3, [r3]
 8003420:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003428:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	3314      	adds	r3, #20
 8003432:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003436:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003438:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800343c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800343e:	e841 2300 	strex	r3, r2, [r1]
 8003442:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003444:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1e3      	bne.n	8003412 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2220      	movs	r2, #32
 800344e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	330c      	adds	r3, #12
 800345e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003462:	e853 3f00 	ldrex	r3, [r3]
 8003466:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800346a:	f023 0310 	bic.w	r3, r3, #16
 800346e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	330c      	adds	r3, #12
 8003478:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800347c:	65ba      	str	r2, [r7, #88]	; 0x58
 800347e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003480:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003482:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003484:	e841 2300 	strex	r3, r2, [r1]
 8003488:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800348a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1e3      	bne.n	8003458 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	4618      	mov	r0, r3
 8003496:	f7fe f998 	bl	80017ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	4619      	mov	r1, r3
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7fd fe96 	bl	80011dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034b0:	e099      	b.n	80035e6 <HAL_UART_IRQHandler+0x50e>
 80034b2:	bf00      	nop
 80034b4:	0800384f 	.word	0x0800384f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 808b 	beq.w	80035ea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80034d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 8086 	beq.w	80035ea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	330c      	adds	r3, #12
 80034e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e8:	e853 3f00 	ldrex	r3, [r3]
 80034ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	330c      	adds	r3, #12
 80034fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003502:	647a      	str	r2, [r7, #68]	; 0x44
 8003504:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003506:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003508:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800350a:	e841 2300 	strex	r3, r2, [r1]
 800350e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1e3      	bne.n	80034de <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	3314      	adds	r3, #20
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	e853 3f00 	ldrex	r3, [r3]
 8003524:	623b      	str	r3, [r7, #32]
   return(result);
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	f023 0301 	bic.w	r3, r3, #1
 800352c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	3314      	adds	r3, #20
 8003536:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800353a:	633a      	str	r2, [r7, #48]	; 0x30
 800353c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003542:	e841 2300 	strex	r3, r2, [r1]
 8003546:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1e3      	bne.n	8003516 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	330c      	adds	r3, #12
 8003562:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	e853 3f00 	ldrex	r3, [r3]
 800356a:	60fb      	str	r3, [r7, #12]
   return(result);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0310 	bic.w	r3, r3, #16
 8003572:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	330c      	adds	r3, #12
 800357c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003580:	61fa      	str	r2, [r7, #28]
 8003582:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003584:	69b9      	ldr	r1, [r7, #24]
 8003586:	69fa      	ldr	r2, [r7, #28]
 8003588:	e841 2300 	strex	r3, r2, [r1]
 800358c:	617b      	str	r3, [r7, #20]
   return(result);
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1e3      	bne.n	800355c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003594:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003598:	4619      	mov	r1, r3
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7fd fe1e 	bl	80011dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035a0:	e023      	b.n	80035ea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d009      	beq.n	80035c2 <HAL_UART_IRQHandler+0x4ea>
 80035ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f95b 	bl	8003876 <UART_Transmit_IT>
    return;
 80035c0:	e014      	b.n	80035ec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00e      	beq.n	80035ec <HAL_UART_IRQHandler+0x514>
 80035ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d008      	beq.n	80035ec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f99b 	bl	8003916 <UART_EndTransmit_IT>
    return;
 80035e0:	e004      	b.n	80035ec <HAL_UART_IRQHandler+0x514>
    return;
 80035e2:	bf00      	nop
 80035e4:	e002      	b.n	80035ec <HAL_UART_IRQHandler+0x514>
      return;
 80035e6:	bf00      	nop
 80035e8:	e000      	b.n	80035ec <HAL_UART_IRQHandler+0x514>
      return;
 80035ea:	bf00      	nop
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 80035ec:	37e8      	adds	r7, #232	; 0xe8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop

080035f4 <HAL_UART_TxCpltCallback>:
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}

 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_UART_RxCpltCallback>:
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}

 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
/**
  * @brief  Rx Half Transfer completed callbacks.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_UART_ErrorCallback>:
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}

 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
/**
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <UART_WaitOnFlagUntilTimeout>:
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003630:	b580      	push	{r7, lr}
 8003632:	b090      	sub	sp, #64	; 0x40
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	603b      	str	r3, [r7, #0]
 800363c:	4613      	mov	r3, r2
 800363e:	71fb      	strb	r3, [r7, #7]
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
 8003640:	e050      	b.n	80036e4 <UART_WaitOnFlagUntilTimeout+0xb4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

 8003642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003648:	d04c      	beq.n	80036e4 <UART_WaitOnFlagUntilTimeout+0xb4>
        huart->gState  = HAL_UART_STATE_READY;
        huart->RxState = HAL_UART_STATE_READY;
 800364a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800364c:	2b00      	cmp	r3, #0
 800364e:	d007      	beq.n	8003660 <UART_WaitOnFlagUntilTimeout+0x30>
 8003650:	f7fd ff7a 	bl	8001548 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800365c:	429a      	cmp	r2, r3
 800365e:	d241      	bcs.n	80036e4 <UART_WaitOnFlagUntilTimeout+0xb4>

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	330c      	adds	r3, #12
 8003666:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366a:	e853 3f00 	ldrex	r3, [r3]
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	330c      	adds	r3, #12
 800367e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003680:	637a      	str	r2, [r7, #52]	; 0x34
 8003682:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003684:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003686:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003688:	e841 2300 	strex	r3, r2, [r1]
 800368c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800368e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1e5      	bne.n	8003660 <UART_WaitOnFlagUntilTimeout+0x30>

 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3314      	adds	r3, #20
 800369a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	e853 3f00 	ldrex	r3, [r3]
 80036a2:	613b      	str	r3, [r7, #16]
   return(result);
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f023 0301 	bic.w	r3, r3, #1
 80036aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	3314      	adds	r3, #20
 80036b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036b4:	623a      	str	r2, [r7, #32]
 80036b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b8:	69f9      	ldr	r1, [r7, #28]
 80036ba:	6a3a      	ldr	r2, [r7, #32]
 80036bc:	e841 2300 	strex	r3, r2, [r1]
 80036c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1e5      	bne.n	8003694 <UART_WaitOnFlagUntilTimeout+0x64>
        return HAL_TIMEOUT;
      }
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }
  return HAL_OK;
}
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

/**
 80036e0:	2303      	movs	r3, #3
 80036e2:	e00f      	b.n	8003704 <UART_WaitOnFlagUntilTimeout+0xd4>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	4013      	ands	r3, r2
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	bf0c      	ite	eq
 80036f4:	2301      	moveq	r3, #1
 80036f6:	2300      	movne	r3, #0
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	461a      	mov	r2, r3
 80036fc:	79fb      	ldrb	r3, [r7, #7]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d09f      	beq.n	8003642 <UART_WaitOnFlagUntilTimeout+0x12>
  * @brief  Start Receive operation in interrupt mode.
  * @note   This function could be called by all HAL UART API providing reception in Interrupt mode.
  * @note   When calling this function, parameters validity is considered as already checked,
  *         i.e. Rx State, buffer address, ...
 8003702:	2300      	movs	r3, #0
  *         UART Handle is assumed as Locked.
 8003704:	4618      	mov	r0, r3
 8003706:	3740      	adds	r7, #64	; 0x40
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <UART_Start_Receive_IT>:
  huart->RxXferSize = Size;
  huart->RxXferCount = Size;

  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->RxState = HAL_UART_STATE_BUSY_RX;

 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	4613      	mov	r3, r2
 8003718:	80fb      	strh	r3, [r7, #6]
  /* Process Unlocked */
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_UNLOCK(huart);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	88fa      	ldrh	r2, [r7, #6]
 8003724:	859a      	strh	r2, [r3, #44]	; 0x2c

 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	88fa      	ldrh	r2, [r7, #6]
 800372a:	85da      	strh	r2, [r3, #46]	; 0x2e
  if (huart->Init.Parity != UART_PARITY_NONE)
  {
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	641a      	str	r2, [r3, #64]	; 0x40
    /* Enable the UART Parity Error Interrupt */
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2222      	movs	r2, #34	; 0x22
 8003736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
  }

 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d007      	beq.n	800375a <UART_Start_Receive_IT+0x4e>

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003758:	60da      	str	r2, [r3, #12]

  return HAL_OK;
}

 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	695a      	ldr	r2, [r3, #20]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f042 0201 	orr.w	r2, r2, #1
 8003768:	615a      	str	r2, [r3, #20]
/**
  * @brief  Start Receive operation in DMA mode.
  * @note   This function could be called by all HAL UART API providing reception in DMA mode.
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f042 0220 	orr.w	r2, r2, #32
 8003778:	60da      	str	r2, [r3, #12]
  * @note   When calling this function, parameters validity is considered as already checked,
  *         i.e. Rx State, buffer address, ...
 800377a:	2300      	movs	r3, #0
  *         UART Handle is assumed as Locked.
 800377c:	4618      	mov	r0, r3
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <UART_EndRxTransfer>:
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
  {
 8003788:	b480      	push	{r7}
 800378a:	b095      	sub	sp, #84	; 0x54
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	330c      	adds	r3, #12
 8003796:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800379a:	e853 3f00 	ldrex	r3, [r3]
 800379e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	330c      	adds	r3, #12
 80037ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037b0:	643a      	str	r2, [r7, #64]	; 0x40
 80037b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037b8:	e841 2300 	strex	r3, r2, [r1]
 80037bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1e5      	bne.n	8003790 <UART_EndRxTransfer+0x8>

 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	3314      	adds	r3, #20
 80037ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	e853 3f00 	ldrex	r3, [r3]
 80037d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f023 0301 	bic.w	r3, r3, #1
 80037da:	64bb      	str	r3, [r7, #72]	; 0x48
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3314      	adds	r3, #20
 80037e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ec:	e841 2300 	strex	r3, r2, [r1]
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1e5      	bne.n	80037c4 <UART_EndRxTransfer+0x3c>
  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d119      	bne.n	8003834 <UART_EndRxTransfer+0xac>
}

 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	330c      	adds	r3, #12
 8003806:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	e853 3f00 	ldrex	r3, [r3]
 800380e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f023 0310 	bic.w	r3, r3, #16
 8003816:	647b      	str	r3, [r7, #68]	; 0x44
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	330c      	adds	r3, #12
 800381e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003820:	61ba      	str	r2, [r7, #24]
 8003822:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003824:	6979      	ldr	r1, [r7, #20]
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	e841 2300 	strex	r3, r2, [r1]
 800382c:	613b      	str	r3, [r7, #16]
   return(result);
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1e5      	bne.n	8003800 <UART_EndRxTransfer+0x78>
/**
  * @brief  DMA UART communication abort callback, when initiated by HAL services on Error
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  *               the configuration information for the specified DMA module.
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	631a      	str	r2, [r3, #48]	; 0x30
  * @retval None
 8003842:	bf00      	nop
 8003844:	3754      	adds	r7, #84	; 0x54
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <UART_DMAAbortOnError>:
  huart->RxXferCount = 0x00U;
  huart->TxXferCount = 0x00U;

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800384e:	b580      	push	{r7, lr}
 8003850:	b084      	sub	sp, #16
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
#else
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385a:	60fb      	str	r3, [r7, #12]
  /*Call legacy weak error callback*/
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	85da      	strh	r2, [r3, #46]	; 0x2e
  HAL_UART_ErrorCallback(huart);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	84da      	strh	r2, [r3, #38]	; 0x26
}

/**
  * @brief  DMA UART Tx communication abort callback, when initiated by user
  *         (To be called at end of DMA Tx Abort procedure following user abort request).
  * @note   When this callback is executed, User Abort complete call back is called only if no
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f7ff fed7 	bl	800361c <HAL_UART_ErrorCallback>
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
 800386e:	bf00      	nop
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <UART_Transmit_IT>:

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
    {
 8003876:	b480      	push	{r7}
 8003878:	b085      	sub	sp, #20
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
      huart->pTxBuffPtr += 2U;
    }
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b21      	cmp	r3, #33	; 0x21
 8003888:	d13e      	bne.n	8003908 <UART_Transmit_IT+0x92>
    else
    {
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003892:	d114      	bne.n	80038be <UART_Transmit_IT+0x48>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d110      	bne.n	80038be <UART_Transmit_IT+0x48>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
    }
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	60fb      	str	r3, [r7, #12]

 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038b0:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	1c9a      	adds	r2, r3, #2
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	621a      	str	r2, [r3, #32]
 80038bc:	e008      	b.n	80038d0 <UART_Transmit_IT+0x5a>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);

 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	1c59      	adds	r1, r3, #1
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6211      	str	r1, [r2, #32]
 80038c8:	781a      	ldrb	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	605a      	str	r2, [r3, #4]
      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
    }
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	3b01      	subs	r3, #1
 80038d8:	b29b      	uxth	r3, r3
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	4619      	mov	r1, r3
 80038de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10f      	bne.n	8003904 <UART_Transmit_IT+0x8e>
    return HAL_OK;
  }
  else
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038f2:	60da      	str	r2, [r3, #12]
  {
    return HAL_BUSY;
  }
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003902:	60da      	str	r2, [r3, #12]
}

 8003904:	2300      	movs	r3, #0
 8003906:	e000      	b.n	800390a <UART_Transmit_IT+0x94>
/**
  * @brief  Wraps up transmission in non blocking mode.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
 8003908:	2302      	movs	r3, #2
  * @retval HAL status
  */
 800390a:	4618      	mov	r0, r3
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <UART_EndTransmit_IT>:
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 8003916:	b580      	push	{r7, lr}
 8003918:	b082      	sub	sp, #8
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800392c:	60da      	str	r2, [r3, #12]
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
}

/**
  * @brief  Receives an amount of data in non blocking mode
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff fe5c 	bl	80035f4 <HAL_UART_TxCpltCallback>
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
 800393c:	2300      	movs	r3, #0
  */
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <UART_Receive_IT>:
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003946:	b580      	push	{r7, lr}
 8003948:	b08c      	sub	sp, #48	; 0x30
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
    {
      pdata8bits  = NULL;
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
      huart->pRxBuffPtr += 2U;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b22      	cmp	r3, #34	; 0x22
 8003958:	f040 80ab 	bne.w	8003ab2 <UART_Receive_IT+0x16c>
    }
    else
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003964:	d117      	bne.n	8003996 <UART_Receive_IT+0x50>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d113      	bne.n	8003996 <UART_Receive_IT+0x50>
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800396e:	2300      	movs	r3, #0
 8003970:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003976:	62bb      	str	r3, [r7, #40]	; 0x28

 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	b29b      	uxth	r3, r3
 8003980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003984:	b29a      	uxth	r2, r3
 8003986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003988:	801a      	strh	r2, [r3, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398e:	1c9a      	adds	r2, r3, #2
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	629a      	str	r2, [r3, #40]	; 0x28
 8003994:	e026      	b.n	80039e4 <UART_Receive_IT+0x9e>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
      }
      else
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399a:	62fb      	str	r3, [r7, #44]	; 0x2c
      {
 800399c:	2300      	movs	r3, #0
 800399e:	62bb      	str	r3, [r7, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
      }
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a8:	d007      	beq.n	80039ba <UART_Receive_IT+0x74>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10a      	bne.n	80039c8 <UART_Receive_IT+0x82>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d106      	bne.n	80039c8 <UART_Receive_IT+0x82>
      huart->pRxBuffPtr += 1U;
    }
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c4:	701a      	strb	r2, [r3, #0]
 80039c6:	e008      	b.n	80039da <UART_Receive_IT+0x94>

    if (--huart->RxXferCount == 0U)
    {
      /* Disable the UART Data Register not empty Interrupt */
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d8:	701a      	strb	r2, [r3, #0]
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);

 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);

 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	4619      	mov	r1, r3
 80039f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d15a      	bne.n	8003aae <UART_Receive_IT+0x168>
      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);

 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0220 	bic.w	r2, r2, #32
 8003a06:	60da      	str	r2, [r3, #12]
      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;

 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a16:	60da      	str	r2, [r3, #12]
      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695a      	ldr	r2, [r3, #20]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0201 	bic.w	r2, r2, #1
 8003a26:	615a      	str	r2, [r3, #20]
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);

 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d135      	bne.n	8003aa4 <UART_Receive_IT+0x15e>
        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
        {
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	631a      	str	r2, [r3, #48]	; 0x30
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
        }
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	330c      	adds	r3, #12
 8003a44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	e853 3f00 	ldrex	r3, [r3]
 8003a4c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f023 0310 	bic.w	r3, r3, #16
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	330c      	adds	r3, #12
 8003a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5e:	623a      	str	r2, [r7, #32]
 8003a60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a62:	69f9      	ldr	r1, [r7, #28]
 8003a64:	6a3a      	ldr	r2, [r7, #32]
 8003a66:	e841 2300 	strex	r3, r2, [r1]
 8003a6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1e5      	bne.n	8003a3e <UART_Receive_IT+0xf8>

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0310 	and.w	r3, r3, #16
 8003a7c:	2b10      	cmp	r3, #16
 8003a7e:	d10a      	bne.n	8003a96 <UART_Receive_IT+0x150>
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
 8003a80:	2300      	movs	r3, #0
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	68fb      	ldr	r3, [r7, #12]
      }
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7fd fb9d 	bl	80011dc <HAL_UARTEx_RxEventCallback>
 8003aa2:	e002      	b.n	8003aaa <UART_Receive_IT+0x164>
      }

      return HAL_OK;
    }
    return HAL_OK;
  }
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7ff fdaf 	bl	8003608 <HAL_UART_RxCpltCallback>
  else
  {
    return HAL_BUSY;
  }
 8003aaa:	2300      	movs	r3, #0
 8003aac:	e002      	b.n	8003ab4 <UART_Receive_IT+0x16e>
}

 8003aae:	2300      	movs	r3, #0
 8003ab0:	e000      	b.n	8003ab4 <UART_Receive_IT+0x16e>
/**
  * @brief  Configures the UART peripheral.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
 8003ab2:	2302      	movs	r3, #2
  * @retval None
  */
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3730      	adds	r7, #48	; 0x30
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <UART_SetConfig>:
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ac0:	b0c0      	sub	sp, #256	; 0x100
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  /*-------------------------- USART CR1 Configuration -----------------------*/
  /* Configure the UART Word Length, Parity and mode:
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
 8003ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad8:	68d9      	ldr	r1, [r3, #12]
 8003ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	ea40 0301 	orr.w	r3, r0, r1
 8003ae4:	6113      	str	r3, [r2, #16]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	431a      	orrs	r2, r3
 8003afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

 8003b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b14:	f021 010c 	bic.w	r1, r1, #12
 8003b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b22:	430b      	orrs	r3, r1
 8003b24:	60d3      	str	r3, [r2, #12]

#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
 8003b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b36:	6999      	ldr	r1, [r3, #24]
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	ea40 0301 	orr.w	r3, r0, r1
 8003b42:	6153      	str	r3, [r2, #20]
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#else
    if (huart->Instance == USART1)
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	4b8f      	ldr	r3, [pc, #572]	; (8003d88 <UART_SetConfig+0x2cc>)
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d005      	beq.n	8003b5c <UART_SetConfig+0xa0>
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	4b8d      	ldr	r3, [pc, #564]	; (8003d8c <UART_SetConfig+0x2d0>)
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d104      	bne.n	8003b66 <UART_SetConfig+0xaa>
    }
#endif /* USART6 */
 8003b5c:	f7fe fc96 	bl	800248c <HAL_RCC_GetPCLK2Freq>
 8003b60:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b64:	e003      	b.n	8003b6e <UART_SetConfig+0xb2>
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
 8003b66:	f7fe fc7d 	bl	8002464 <HAL_RCC_GetPCLK1Freq>
 8003b6a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
 8003b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b78:	f040 810c 	bne.w	8003d94 <UART_SetConfig+0x2d8>
}

 8003b7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b80:	2200      	movs	r2, #0
 8003b82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b8e:	4622      	mov	r2, r4
 8003b90:	462b      	mov	r3, r5
 8003b92:	1891      	adds	r1, r2, r2
 8003b94:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b96:	415b      	adcs	r3, r3
 8003b98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	eb12 0801 	adds.w	r8, r2, r1
 8003ba4:	4629      	mov	r1, r5
 8003ba6:	eb43 0901 	adc.w	r9, r3, r1
 8003baa:	f04f 0200 	mov.w	r2, #0
 8003bae:	f04f 0300 	mov.w	r3, #0
 8003bb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bbe:	4690      	mov	r8, r2
 8003bc0:	4699      	mov	r9, r3
 8003bc2:	4623      	mov	r3, r4
 8003bc4:	eb18 0303 	adds.w	r3, r8, r3
 8003bc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003bcc:	462b      	mov	r3, r5
 8003bce:	eb49 0303 	adc.w	r3, r9, r3
 8003bd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003be2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003be6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003bea:	460b      	mov	r3, r1
 8003bec:	18db      	adds	r3, r3, r3
 8003bee:	653b      	str	r3, [r7, #80]	; 0x50
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	eb42 0303 	adc.w	r3, r2, r3
 8003bf6:	657b      	str	r3, [r7, #84]	; 0x54
 8003bf8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003bfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c00:	f7fc fb08 	bl	8000214 <__aeabi_uldivmod>
 8003c04:	4602      	mov	r2, r0
 8003c06:	460b      	mov	r3, r1
 8003c08:	4b61      	ldr	r3, [pc, #388]	; (8003d90 <UART_SetConfig+0x2d4>)
 8003c0a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c0e:	095b      	lsrs	r3, r3, #5
 8003c10:	011c      	lsls	r4, r3, #4
 8003c12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c16:	2200      	movs	r2, #0
 8003c18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c24:	4642      	mov	r2, r8
 8003c26:	464b      	mov	r3, r9
 8003c28:	1891      	adds	r1, r2, r2
 8003c2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c2c:	415b      	adcs	r3, r3
 8003c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c34:	4641      	mov	r1, r8
 8003c36:	eb12 0a01 	adds.w	sl, r2, r1
 8003c3a:	4649      	mov	r1, r9
 8003c3c:	eb43 0b01 	adc.w	fp, r3, r1
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	f04f 0300 	mov.w	r3, #0
 8003c48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c54:	4692      	mov	sl, r2
 8003c56:	469b      	mov	fp, r3
 8003c58:	4643      	mov	r3, r8
 8003c5a:	eb1a 0303 	adds.w	r3, sl, r3
 8003c5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c62:	464b      	mov	r3, r9
 8003c64:	eb4b 0303 	adc.w	r3, fp, r3
 8003c68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c80:	460b      	mov	r3, r1
 8003c82:	18db      	adds	r3, r3, r3
 8003c84:	643b      	str	r3, [r7, #64]	; 0x40
 8003c86:	4613      	mov	r3, r2
 8003c88:	eb42 0303 	adc.w	r3, r2, r3
 8003c8c:	647b      	str	r3, [r7, #68]	; 0x44
 8003c8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c96:	f7fc fabd 	bl	8000214 <__aeabi_uldivmod>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	4611      	mov	r1, r2
 8003ca0:	4b3b      	ldr	r3, [pc, #236]	; (8003d90 <UART_SetConfig+0x2d4>)
 8003ca2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	2264      	movs	r2, #100	; 0x64
 8003caa:	fb02 f303 	mul.w	r3, r2, r3
 8003cae:	1acb      	subs	r3, r1, r3
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003cb6:	4b36      	ldr	r3, [pc, #216]	; (8003d90 <UART_SetConfig+0x2d4>)
 8003cb8:	fba3 2302 	umull	r2, r3, r3, r2
 8003cbc:	095b      	lsrs	r3, r3, #5
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cc4:	441c      	add	r4, r3
 8003cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cd0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003cd4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003cd8:	4642      	mov	r2, r8
 8003cda:	464b      	mov	r3, r9
 8003cdc:	1891      	adds	r1, r2, r2
 8003cde:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ce0:	415b      	adcs	r3, r3
 8003ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ce4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ce8:	4641      	mov	r1, r8
 8003cea:	1851      	adds	r1, r2, r1
 8003cec:	6339      	str	r1, [r7, #48]	; 0x30
 8003cee:	4649      	mov	r1, r9
 8003cf0:	414b      	adcs	r3, r1
 8003cf2:	637b      	str	r3, [r7, #52]	; 0x34
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d00:	4659      	mov	r1, fp
 8003d02:	00cb      	lsls	r3, r1, #3
 8003d04:	4651      	mov	r1, sl
 8003d06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d0a:	4651      	mov	r1, sl
 8003d0c:	00ca      	lsls	r2, r1, #3
 8003d0e:	4610      	mov	r0, r2
 8003d10:	4619      	mov	r1, r3
 8003d12:	4603      	mov	r3, r0
 8003d14:	4642      	mov	r2, r8
 8003d16:	189b      	adds	r3, r3, r2
 8003d18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d1c:	464b      	mov	r3, r9
 8003d1e:	460a      	mov	r2, r1
 8003d20:	eb42 0303 	adc.w	r3, r2, r3
 8003d24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	18db      	adds	r3, r3, r3
 8003d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d42:	4613      	mov	r3, r2
 8003d44:	eb42 0303 	adc.w	r3, r2, r3
 8003d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d52:	f7fc fa5f 	bl	8000214 <__aeabi_uldivmod>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4b0d      	ldr	r3, [pc, #52]	; (8003d90 <UART_SetConfig+0x2d4>)
 8003d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d60:	095b      	lsrs	r3, r3, #5
 8003d62:	2164      	movs	r1, #100	; 0x64
 8003d64:	fb01 f303 	mul.w	r3, r1, r3
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	3332      	adds	r3, #50	; 0x32
 8003d6e:	4a08      	ldr	r2, [pc, #32]	; (8003d90 <UART_SetConfig+0x2d4>)
 8003d70:	fba2 2303 	umull	r2, r3, r2, r3
 8003d74:	095b      	lsrs	r3, r3, #5
 8003d76:	f003 0207 	and.w	r2, r3, #7
 8003d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4422      	add	r2, r4
 8003d82:	609a      	str	r2, [r3, #8]
/**
  * @}
  */

#endif /* HAL_UART_MODULE_ENABLED */
/**
 8003d84:	e105      	b.n	8003f92 <UART_SetConfig+0x4d6>
 8003d86:	bf00      	nop
 8003d88:	40011000 	.word	0x40011000
 8003d8c:	40011400 	.word	0x40011400
 8003d90:	51eb851f 	.word	0x51eb851f

 8003d94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003da2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003da6:	4642      	mov	r2, r8
 8003da8:	464b      	mov	r3, r9
 8003daa:	1891      	adds	r1, r2, r2
 8003dac:	6239      	str	r1, [r7, #32]
 8003dae:	415b      	adcs	r3, r3
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
 8003db2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003db6:	4641      	mov	r1, r8
 8003db8:	1854      	adds	r4, r2, r1
 8003dba:	4649      	mov	r1, r9
 8003dbc:	eb43 0501 	adc.w	r5, r3, r1
 8003dc0:	f04f 0200 	mov.w	r2, #0
 8003dc4:	f04f 0300 	mov.w	r3, #0
 8003dc8:	00eb      	lsls	r3, r5, #3
 8003dca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dce:	00e2      	lsls	r2, r4, #3
 8003dd0:	4614      	mov	r4, r2
 8003dd2:	461d      	mov	r5, r3
 8003dd4:	4643      	mov	r3, r8
 8003dd6:	18e3      	adds	r3, r4, r3
 8003dd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ddc:	464b      	mov	r3, r9
 8003dde:	eb45 0303 	adc.w	r3, r5, r3
 8003de2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003df2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e02:	4629      	mov	r1, r5
 8003e04:	008b      	lsls	r3, r1, #2
 8003e06:	4621      	mov	r1, r4
 8003e08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e0c:	4621      	mov	r1, r4
 8003e0e:	008a      	lsls	r2, r1, #2
 8003e10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e14:	f7fc f9fe 	bl	8000214 <__aeabi_uldivmod>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4b60      	ldr	r3, [pc, #384]	; (8003fa0 <UART_SetConfig+0x4e4>)
 8003e1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	011c      	lsls	r4, r3, #4
 8003e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e38:	4642      	mov	r2, r8
 8003e3a:	464b      	mov	r3, r9
 8003e3c:	1891      	adds	r1, r2, r2
 8003e3e:	61b9      	str	r1, [r7, #24]
 8003e40:	415b      	adcs	r3, r3
 8003e42:	61fb      	str	r3, [r7, #28]
 8003e44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e48:	4641      	mov	r1, r8
 8003e4a:	1851      	adds	r1, r2, r1
 8003e4c:	6139      	str	r1, [r7, #16]
 8003e4e:	4649      	mov	r1, r9
 8003e50:	414b      	adcs	r3, r1
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e60:	4659      	mov	r1, fp
 8003e62:	00cb      	lsls	r3, r1, #3
 8003e64:	4651      	mov	r1, sl
 8003e66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e6a:	4651      	mov	r1, sl
 8003e6c:	00ca      	lsls	r2, r1, #3
 8003e6e:	4610      	mov	r0, r2
 8003e70:	4619      	mov	r1, r3
 8003e72:	4603      	mov	r3, r0
 8003e74:	4642      	mov	r2, r8
 8003e76:	189b      	adds	r3, r3, r2
 8003e78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e7c:	464b      	mov	r3, r9
 8003e7e:	460a      	mov	r2, r1
 8003e80:	eb42 0303 	adc.w	r3, r2, r3
 8003e84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	f04f 0300 	mov.w	r3, #0
 8003e9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ea0:	4649      	mov	r1, r9
 8003ea2:	008b      	lsls	r3, r1, #2
 8003ea4:	4641      	mov	r1, r8
 8003ea6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eaa:	4641      	mov	r1, r8
 8003eac:	008a      	lsls	r2, r1, #2
 8003eae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003eb2:	f7fc f9af 	bl	8000214 <__aeabi_uldivmod>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4b39      	ldr	r3, [pc, #228]	; (8003fa0 <UART_SetConfig+0x4e4>)
 8003ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	2164      	movs	r1, #100	; 0x64
 8003ec4:	fb01 f303 	mul.w	r3, r1, r3
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	3332      	adds	r3, #50	; 0x32
 8003ece:	4a34      	ldr	r2, [pc, #208]	; (8003fa0 <UART_SetConfig+0x4e4>)
 8003ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed4:	095b      	lsrs	r3, r3, #5
 8003ed6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eda:	441c      	add	r4, r3
 8003edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	673b      	str	r3, [r7, #112]	; 0x70
 8003ee4:	677a      	str	r2, [r7, #116]	; 0x74
 8003ee6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003eea:	4642      	mov	r2, r8
 8003eec:	464b      	mov	r3, r9
 8003eee:	1891      	adds	r1, r2, r2
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	415b      	adcs	r3, r3
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003efa:	4641      	mov	r1, r8
 8003efc:	1851      	adds	r1, r2, r1
 8003efe:	6039      	str	r1, [r7, #0]
 8003f00:	4649      	mov	r1, r9
 8003f02:	414b      	adcs	r3, r1
 8003f04:	607b      	str	r3, [r7, #4]
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f12:	4659      	mov	r1, fp
 8003f14:	00cb      	lsls	r3, r1, #3
 8003f16:	4651      	mov	r1, sl
 8003f18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f1c:	4651      	mov	r1, sl
 8003f1e:	00ca      	lsls	r2, r1, #3
 8003f20:	4610      	mov	r0, r2
 8003f22:	4619      	mov	r1, r3
 8003f24:	4603      	mov	r3, r0
 8003f26:	4642      	mov	r2, r8
 8003f28:	189b      	adds	r3, r3, r2
 8003f2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f2c:	464b      	mov	r3, r9
 8003f2e:	460a      	mov	r2, r1
 8003f30:	eb42 0303 	adc.w	r3, r2, r3
 8003f34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	663b      	str	r3, [r7, #96]	; 0x60
 8003f40:	667a      	str	r2, [r7, #100]	; 0x64
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	f04f 0300 	mov.w	r3, #0
 8003f4a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f4e:	4649      	mov	r1, r9
 8003f50:	008b      	lsls	r3, r1, #2
 8003f52:	4641      	mov	r1, r8
 8003f54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f58:	4641      	mov	r1, r8
 8003f5a:	008a      	lsls	r2, r1, #2
 8003f5c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f60:	f7fc f958 	bl	8000214 <__aeabi_uldivmod>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4b0d      	ldr	r3, [pc, #52]	; (8003fa0 <UART_SetConfig+0x4e4>)
 8003f6a:	fba3 1302 	umull	r1, r3, r3, r2
 8003f6e:	095b      	lsrs	r3, r3, #5
 8003f70:	2164      	movs	r1, #100	; 0x64
 8003f72:	fb01 f303 	mul.w	r3, r1, r3
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	3332      	adds	r3, #50	; 0x32
 8003f7c:	4a08      	ldr	r2, [pc, #32]	; (8003fa0 <UART_SetConfig+0x4e4>)
 8003f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f82:	095b      	lsrs	r3, r3, #5
 8003f84:	f003 020f 	and.w	r2, r3, #15
 8003f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4422      	add	r2, r4
 8003f90:	609a      	str	r2, [r3, #8]
/**
 8003f92:	bf00      	nop
 8003f94:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f9e:	bf00      	nop
 8003fa0:	51eb851f 	.word	0x51eb851f

08003fa4 <__libc_init_array>:
 8003fa4:	b570      	push	{r4, r5, r6, lr}
 8003fa6:	4d0d      	ldr	r5, [pc, #52]	; (8003fdc <__libc_init_array+0x38>)
 8003fa8:	4c0d      	ldr	r4, [pc, #52]	; (8003fe0 <__libc_init_array+0x3c>)
 8003faa:	1b64      	subs	r4, r4, r5
 8003fac:	10a4      	asrs	r4, r4, #2
 8003fae:	2600      	movs	r6, #0
 8003fb0:	42a6      	cmp	r6, r4
 8003fb2:	d109      	bne.n	8003fc8 <__libc_init_array+0x24>
 8003fb4:	4d0b      	ldr	r5, [pc, #44]	; (8003fe4 <__libc_init_array+0x40>)
 8003fb6:	4c0c      	ldr	r4, [pc, #48]	; (8003fe8 <__libc_init_array+0x44>)
 8003fb8:	f000 f820 	bl	8003ffc <_init>
 8003fbc:	1b64      	subs	r4, r4, r5
 8003fbe:	10a4      	asrs	r4, r4, #2
 8003fc0:	2600      	movs	r6, #0
 8003fc2:	42a6      	cmp	r6, r4
 8003fc4:	d105      	bne.n	8003fd2 <__libc_init_array+0x2e>
 8003fc6:	bd70      	pop	{r4, r5, r6, pc}
 8003fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fcc:	4798      	blx	r3
 8003fce:	3601      	adds	r6, #1
 8003fd0:	e7ee      	b.n	8003fb0 <__libc_init_array+0xc>
 8003fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fd6:	4798      	blx	r3
 8003fd8:	3601      	adds	r6, #1
 8003fda:	e7f2      	b.n	8003fc2 <__libc_init_array+0x1e>
 8003fdc:	080040ac 	.word	0x080040ac
 8003fe0:	080040ac 	.word	0x080040ac
 8003fe4:	080040ac 	.word	0x080040ac
 8003fe8:	080040b0 	.word	0x080040b0

08003fec <memset>:
 8003fec:	4402      	add	r2, r0
 8003fee:	4603      	mov	r3, r0
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d100      	bne.n	8003ff6 <memset+0xa>
 8003ff4:	4770      	bx	lr
 8003ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8003ffa:	e7f9      	b.n	8003ff0 <memset+0x4>

08003ffc <_init>:
 8003ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ffe:	bf00      	nop
 8004000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004002:	bc08      	pop	{r3}
 8004004:	469e      	mov	lr, r3
 8004006:	4770      	bx	lr

08004008 <_fini>:
 8004008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400a:	bf00      	nop
 800400c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800400e:	bc08      	pop	{r3}
 8004010:	469e      	mov	lr, r3
 8004012:	4770      	bx	lr
